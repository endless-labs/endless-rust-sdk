// Copyright © Endless
// Copyright © Aptos Foundation
// SPDX-License-Identifier: Apache-2.0

// This file was generated. Do not modify!
//
// To update this code, run: `cargo run --release -p framework`.

// Conversion library between a structured representation of a Move script call (`ScriptCall`) and the
// standard BCS-compatible representation used in Endless transactions (`Script`).
//
// This code was generated by compiling known Script interfaces ("ABIs") with the tool `endless-sdk-builder`.

#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::arc_with_non_send_sync)]
#![allow(clippy::get_first)]
use endless_types::{
    account_address::AccountAddress,
    transaction::{EntryFunction, TransactionPayload},
};
use move_core_types::{
    ident_str,
    language_storage::{ModuleId, TypeTag},
};

type Bytes = Vec<u8>;

/// Structured representation of a call into a known Move entry function.
/// ```ignore
/// impl EntryFunctionCall {
///     pub fn encode(self) -> TransactionPayload { .. }
///     pub fn decode(&TransactionPayload) -> Option<EntryFunctionCall> { .. }
/// }
/// ```
#[derive(Clone, Debug, PartialEq, Eq)]
#[cfg_attr(feature = "fuzzing", derive(proptest_derive::Arbitrary))]
#[cfg_attr(feature = "fuzzing", proptest(no_params))]
pub enum EntryFunctionCall {
    /// Add `new_author` to the account's `authentication_key`.
    AccountAddAuthenticationKey {},

    /// Similar to `add_authentication_key` but batch adding
    /// And can set `num_signatures_required`
    AccountBatchAddAuthenticationKey {
        num_signatures_required: u64,
    },

    /// Similar to `remove_authentication_key` but batch removing
    /// And can update `num_signatures_required`
    AccountBatchRemoveAuthenticationKey {
        auth_keys: Vec<Vec<u8>>,
        num_signatures_required: u64,
    },

    /// Create a multisig account which owned by `owners`
    /// Note that `creator` is not included unless it is one of `owners`
    AccountCreateMultisigAccount {
        num_signatures_required: u64,
    },

    /// Remove `auth_key` from the account's `authentication_key`.
    /// If the `auth_key` is not in the account's `authentication_key`, this function will do nothing.
    /// If the `authentication_key`'s length less than `num_signatures_required` after remove, it will fail
    AccountRemoveAuthenticationKey {
        auth_key: Vec<u8>,
    },

    /// Update the number of signatures required, it will fail if
    /// 1. `num_signatures_required` is 0
    /// 2. `num_signatures_required` is greater than the number of keys in `authentication_key`
    AccountSetNumSignaturesRequired {
        num_signatures_required: u64,
    },

    /// Replace `old_auth_key` with `new_auth`
    AccountSwapAuthenticationKey {
        old_auth_key: Vec<u8>,
    },

    /// Same as `publish_package` but as an entry function which can be called as a transaction. Because
    /// of current restrictions for txn parameters, the metadata needs to be passed in serialized form.
    CodePublishPackageTxn {
        metadata_serialized: Vec<u8>,
        code: Vec<Vec<u8>>,
    },

    /// Add `amount` of coins to the delegation pool `pool_address`.
    DelegationPoolAddStake {
        pool_address: AccountAddress,
        amount: u128,
    },

    /// A voter could create a governance proposal by this function. To successfully create a proposal, the voter's
    /// voting power in THIS delegation pool must be not less than the minimum required voting power specified in
    /// `endless_governance.move`.
    DelegationPoolCreateProposal {
        pool_address: AccountAddress,
        execution_hash: Vec<u8>,
        metadata_location: Vec<u8>,
        metadata_hash: Vec<u8>,
        is_multi_step_proposal: bool,
    },

    /// Allows a delegator to delegate its voting power to a voter. If this delegator already has a delegated voter,
    /// this change won't take effects until the next lockup period.
    DelegationPoolDelegateVotingPower {
        pool_address: AccountAddress,
        new_voter: AccountAddress,
    },

    /// Enable partial governance voting on a stake pool. The voter of this stake pool will be managed by this module.
    /// THe existing voter will be replaced. The function is permissionless.
    DelegationPoolEnablePartialGovernanceVoting {
        pool_address: AccountAddress,
    },

    /// Initialize a delegation pool of custom fixed `operator_commission_percentage`.
    /// A resource account is created from `owner` signer and its supplied `delegation_pool_creation_seed`
    /// to host the delegation pool resource and own the underlying stake pool.
    /// Ownership over setting the operator/voter is granted to `owner` who has both roles initially.
    DelegationPoolInitializeDelegationPool {
        operator_commission_percentage: u64,
        delegation_pool_creation_seed: Vec<u8>,
    },

    /// Move `amount` of coins from pending_inactive to active.
    DelegationPoolReactivateStake {
        pool_address: AccountAddress,
        amount: u128,
    },

    /// Allows an operator to change its beneficiary. Any existing unpaid commission rewards will be paid to the new
    /// beneficiary. To ensures payment to the current beneficiary, one should first call `synchronize_delegation_pool`
    /// before switching the beneficiary. An operator can set one beneficiary for delegation pools, not a separate
    /// one for each pool.
    DelegationPoolSetBeneficiaryForOperator {
        new_beneficiary: AccountAddress,
    },

    /// Allows an owner to change the delegated voter of the underlying stake pool.
    DelegationPoolSetDelegatedVoter {
        new_voter: AccountAddress,
    },

    /// Allows an owner to change the operator of the underlying stake pool.
    DelegationPoolSetOperator {
        new_operator: AccountAddress,
    },

    /// Synchronize delegation and stake pools: distribute yet-undetected rewards to the corresponding internal
    /// shares pools, assign commission to operator and eventually prepare delegation pool for a new lockup cycle.
    DelegationPoolSynchronizeDelegationPool {
        pool_address: AccountAddress,
    },

    /// Unlock `amount` from the active + pending_active stake of `delegator` or
    /// at most how much active stake there is on the stake pool.
    DelegationPoolUnlock {
        pool_address: AccountAddress,
        amount: u128,
    },

    /// Allows an owner to update the commission percentage for the operator of the underlying stake pool.
    DelegationPoolUpdateCommissionPercentage {
        new_commission_percentage: u64,
    },

    /// Vote on a proposal with a voter's voting power. To successfully vote, the following conditions must be met:
    /// 1. The voting period of the proposal hasn't ended.
    /// 2. The delegation pool's lockup period ends after the voting period of the proposal.
    /// 3. The voter still has spare voting power on this proposal.
    /// 4. The delegation pool never votes on the proposal before enabling partial governance voting.
    DelegationPoolVote {
        pool_address: AccountAddress,
        proposal_id: u64,
        voting_power: u128,
        should_pass: bool,
    },

    /// Withdraw `amount` of owned inactive stake from the delegation pool at `pool_address`.
    DelegationPoolWithdraw {
        pool_address: AccountAddress,
        amount: u128,
    },

    /// Batch version of EDS transfer.
    EndlessAccountBatchTransfer {
        recipients: Vec<AccountAddress>,
        amounts: Vec<u128>,
    },

    /// Basic account creation methods.
    EndlessAccountCreateAccount {
        auth_key: AccountAddress,
    },

    /// Set whether `account` can receive direct transfers of coins that they have not explicitly registered to receive.
    EndlessAccountSetAllowDirectCoinTransfers {
        allow: bool,
    },

    /// Convenient function to transfer EDS to a recipient account that might not exist.
    /// This would create the recipient account first, which also registers it to receive EDS, before transferring.
    EndlessAccountTransfer {
        to: AccountAddress,
        amount: u128,
    },

    /// Only callable in tests and testnets where the core resources account exists.
    /// Claim the delegated mint capability and destroy the delegated token.
    EndlessCoinClaimMintCapability {},

    /// Only callable in tests and testnets where the core resources account exists.
    /// Create delegated token for the address so the account could claim MintCapability later.
    EndlessCoinDelegateMintCapability {
        to: AccountAddress,
    },

    /// Only callable in tests and testnets where the core resources account exists.
    /// Create new coins and deposit them into dst_addr's account.
    EndlessCoinMint {
        dst_addr: AccountAddress,
        amount: u128,
    },

    EndlessCoinTransfer {
        to: AccountAddress,
        amount: u128,
    },

    EndlessGovernanceAddApprovedScriptHashScript {
        proposal_id: u64,
    },

    /// Create a single-step proposal with the backing `stake_pool`.
    /// @param execution_hash Required. This is the hash of the resolution script. When the proposal is resolved,
    /// only the exact script with matching hash can be successfully executed.
    EndlessGovernanceCreateProposal {
        stake_pool: AccountAddress,
        execution_hash: Vec<u8>,
        metadata_location: Vec<u8>,
        metadata_hash: Vec<u8>,
    },

    /// Create a single-step or multi-step proposal with the backing `stake_pool`.
    /// @param execution_hash Required. This is the hash of the resolution script. When the proposal is resolved,
    /// only the exact script with matching hash can be successfully executed.
    EndlessGovernanceCreateProposalV2 {
        stake_pool: AccountAddress,
        execution_hash: Vec<u8>,
        metadata_location: Vec<u8>,
        metadata_hash: Vec<u8>,
        is_multi_step_proposal: bool,
    },

    /// `force_end_epoch()` equivalent but only called in testnet,
    /// where the core resources account exists and has been granted power to mint Endelss coins.
    EndlessGovernanceForceEndEpochTestOnly {},

    /// Vote on proposal with `proposal_id` and specified voting power from `stake_pool`.
    EndlessGovernancePartialVote {
        stake_pool: AccountAddress,
        proposal_id: u64,
        voting_power: u128,
        should_pass: bool,
    },

    /// Vote on proposal with `proposal_id` and all voting power from `stake_pool`.
    EndlessGovernanceVote {
        stake_pool: AccountAddress,
        proposal_id: u64,
        should_pass: bool,
    },

    FaucetFund {
        dst_addr: AccountAddress,
    },

    LockingCoinExAddLockingPlan {
        token_address: AccountAddress,
        reciever: AccountAddress,
        total_coins: u128,
        first_unlock_percent: u64,
        first_unlock_epoch: u64,
        stable_unlock_interval: u64,
        stable_unlock_periods: u64,
    },

    /// Send locking coin to another address from free amount and unlock by plan
    LockingCoinExAddLockingPlanFromUnlockedBalance {
        token_address: AccountAddress,
        reciever: AccountAddress,
        total_coins: u128,
        first_unlock_percent: u64,
        first_unlock_epoch: u64,
        stable_unlock_interval: u64,
        stable_unlock_periods: u64,
    },

    /// Claim coins when recipient has free amount.
    LockingCoinExClaim {
        token_address: AccountAddress,
        amount: u128,
    },

    /// Approve a multisig transaction.
    MultisigAccountApproveTransaction {
        multisig_account: AccountAddress,
        sequence_number: u64,
    },

    /// Create a multisig transaction, which will have one approval initially (from the creator).
    MultisigAccountCreateTransaction {
        multisig_account: AccountAddress,
        payload: Vec<u8>,
    },

    /// Create a multisig transaction with a transaction hash instead of the full payload.
    /// This means the payload will be stored off chain for gas saving. Later, during execution, the executor will need
    /// to provide the full payload, which will be validated against the hash stored on-chain.
    MultisigAccountCreateTransactionWithHash {
        multisig_account: AccountAddress,
        payload_hash: Vec<u8>,
    },

    /// Remove the next transaction if it has sufficient owner rejections.
    MultisigAccountExecuteRejectedTransaction {
        multisig_account: AccountAddress,
    },

    /// Reject a multisig transaction.
    MultisigAccountRejectTransaction {
        multisig_account: AccountAddress,
        sequence_number: u64,
    },

    /// Generic function that can be used to either approve or reject a multisig transaction
    MultisigAccountVoteTransanction {
        multisig_account: AccountAddress,
        sequence_number: u64,
        approved: bool,
    },

    /// Entry function that can be used to transfer, if allow_ungated_transfer is set true.
    ObjectTransferCall {
        object: AccountAddress,
        to: AccountAddress,
    },

    /// Creates a new object with a unique address derived from the publisher address and the object seed.
    /// Publishes the code passed in the function to the newly created object.
    /// The caller must provide package metadata describing the package via `metadata_serialized` and
    /// the code to be published via `code`. This contains a vector of modules to be deployed on-chain.
    ObjectCodeDeploymentPublish {
        metadata_serialized: Vec<u8>,
        code: Vec<Vec<u8>>,
    },

    /// Creates a new resource account and rotates the authentication key to either
    /// the optional auth key if it is non-empty (though auth keys are 32-bytes)
    /// or the source accounts current auth key.
    ResourceAccountCreateResourceAccount {
        seed: Vec<u8>,
        optional_auth_key: Vec<Vec<u8>>,
    },

    /// Creates a new resource account, transfer the amount of coins from the origin to the resource
    /// account, and rotates the authentication key to either the optional auth key if it is
    /// non-empty (though auth keys are 32-bytes) or the source accounts current auth key. Note,
    /// this function adds additional resource ownership to the resource account and should only be
    /// used for resource accounts that need access to `Coin<EndlessCoin>`.
    ResourceAccountCreateResourceAccountAndFund {
        seed: Vec<u8>,
        optional_auth_key: Vec<Vec<u8>>,
        fund_amount: u128,
    },

    /// Creates a new resource account, publishes the package under this account transaction under
    /// this account and leaves the signer cap readily available for pickup.
    ResourceAccountCreateResourceAccountAndPublishPackage {
        seed: Vec<u8>,
        metadata_serialized: Vec<u8>,
        code: Vec<Vec<u8>>,
    },

    /// Add `amount` of coins from the `account` owning the StakePool.
    StakeAddStake {
        amount: u128,
    },

    /// Similar to increase_lockup_with_cap but will use ownership capability from the signing account.
    StakeIncreaseLockup {},

    /// Initialize the validator account and give ownership to the signing account
    /// except it leaves the ValidatorConfig to be set by another entity.
    /// Note: this triggers setting the operator and owner, set it to the account's address
    /// to set later.
    StakeInitializeStakeOwner {
        initial_stake_amount: u128,
        operator: AccountAddress,
        voter: AccountAddress,
    },

    /// Initialize the validator account and give ownership to the signing account.
    StakeInitializeValidator {
        consensus_pubkey: Vec<u8>,
        proof_of_possession: Vec<u8>,
        network_addresses: Vec<u8>,
        fullnode_addresses: Vec<u8>,
    },

    /// This can only called by the operator of the validator/staking pool.
    StakeJoinValidatorSet {
        pool_address: AccountAddress,
    },

    /// Request to have `pool_address` leave the validator set. The validator is only actually removed from the set when
    /// the next epoch starts.
    /// The last validator in the set cannot leave. This is an edge case that should never happen as long as the network
    /// is still operational.
    ///
    /// Can only be called by the operator of the validator/staking pool.
    StakeLeaveValidatorSet {
        pool_address: AccountAddress,
    },

    /// Move `amount` of coins from pending_inactive to active.
    StakeReactivateStake {
        amount: u128,
    },

    /// Rotate the consensus key of the validator, it'll take effect in next epoch.
    StakeRotateConsensusKey {
        pool_address: AccountAddress,
        new_consensus_pubkey: Vec<u8>,
        proof_of_possession: Vec<u8>,
    },

    /// Allows an owner to change the delegated voter of the stake pool.
    StakeSetDelegatedVoter {
        new_voter: AccountAddress,
    },

    /// Allows an owner to change the operator of the stake pool.
    StakeSetOperator {
        new_operator: AccountAddress,
    },

    /// Similar to unlock_with_cap but will use ownership capability from the signing account.
    StakeUnlock {
        amount: u128,
    },

    /// Update the network and full node addresses of the validator. This only takes effect in the next epoch.
    StakeUpdateNetworkAndFullnodeAddresses {
        pool_address: AccountAddress,
        new_network_addresses: Vec<u8>,
        new_fullnode_addresses: Vec<u8>,
    },

    /// Withdraw from `account`'s inactive stake.
    StakeWithdraw {
        withdraw_amount: u128,
    },

    /// Add more stake to an existing staking contract.
    StakingContractAddStake {
        operator: AccountAddress,
        amount: u128,
    },

    /// Staker can call this function to create a simple staking contract with a specified operator.
    StakingContractCreateStakingContract {
        operator: AccountAddress,
        voter: AccountAddress,
        amount: u128,
        commission_percentage: u64,
        contract_creation_seed: Vec<u8>,
    },

    /// Allow anyone to distribute already unlocked funds. This does not affect reward compounding and therefore does
    /// not need to be restricted to just the staker or operator.
    StakingContractDistribute {
        staker: AccountAddress,
        operator: AccountAddress,
    },

    /// Unlock commission amount from the stake pool. Operator needs to wait for the amount to become withdrawable
    /// at the end of the stake pool's lockup period before they can actually can withdraw_commission.
    ///
    /// Only staker, operator or beneficiary can call this.
    StakingContractRequestCommission {
        staker: AccountAddress,
        operator: AccountAddress,
    },

    /// Convenient function to allow the staker to reset their stake pool's lockup period to start now.
    StakingContractResetLockup {
        operator: AccountAddress,
    },

    /// Allows an operator to change its beneficiary. Any existing unpaid commission rewards will be paid to the new
    /// beneficiary. To ensures payment to the current beneficiary, one should first call `distribute` before switching
    /// the beneficiary. An operator can set one beneficiary for staking contract pools, not a separate one for each pool.
    StakingContractSetBeneficiaryForOperator {
        new_beneficiary: AccountAddress,
    },

    /// Allows staker to switch operator without going through the lenghthy process to unstake.
    StakingContractSwitchOperator {
        old_operator: AccountAddress,
        new_operator: AccountAddress,
        new_commission_percentage: u64,
    },

    /// Allows staker to switch operator without going through the lenghthy process to unstake, without resetting commission.
    StakingContractSwitchOperatorWithSameCommission {
        old_operator: AccountAddress,
        new_operator: AccountAddress,
    },

    /// Unlock all accumulated rewards since the last recorded principals.
    StakingContractUnlockRewards {
        operator: AccountAddress,
    },

    /// Staker can call this to request withdrawal of part or all of their staking_contract.
    /// This also triggers paying commission to the operator for accounting simplicity.
    StakingContractUnlockStake {
        operator: AccountAddress,
        amount: u128,
    },

    /// Convenience function to allow a staker to update the commission percentage paid to the operator.
    /// TODO: fix the typo in function name. commision -> commission
    StakingContractUpdateCommision {
        operator: AccountAddress,
        new_commission_percentage: u64,
    },

    /// Convenient function to allow the staker to update the voter address in a staking contract they made.
    StakingContractUpdateVoter {
        operator: AccountAddress,
        new_voter: AccountAddress,
    },

    StakingProxySetOperator {
        old_operator: AccountAddress,
        new_operator: AccountAddress,
    },

    StakingProxySetStakePoolOperator {
        new_operator: AccountAddress,
    },

    StakingProxySetStakePoolVoter {
        new_voter: AccountAddress,
    },

    StakingProxySetStakingContractOperator {
        old_operator: AccountAddress,
        new_operator: AccountAddress,
    },

    StakingProxySetStakingContractVoter {
        operator: AccountAddress,
        new_voter: AccountAddress,
    },

    StakingProxySetVestingContractOperator {
        old_operator: AccountAddress,
        new_operator: AccountAddress,
    },

    StakingProxySetVestingContractVoter {
        operator: AccountAddress,
        new_voter: AccountAddress,
    },

    StakingProxySetVoter {
        operator: AccountAddress,
        new_voter: AccountAddress,
    },

    /// Used in on-chain governances to update the major version for the next epoch.
    /// Example usage:
    /// - `endless_framework::version::set_for_next_epoch(&framework_signer, new_version);`
    /// - `endless_framework::endless_governance::reconfigure(&framework_signer);`
    VersionSetForNextEpoch {
        major: u64,
    },

    /// Withdraw all funds to the preset vesting contract's withdrawal address. This can only be called if the contract
    /// has already been terminated.
    VestingAdminWithdraw {
        contract_address: AccountAddress,
    },

    /// Distribute any withdrawable stake from the stake pool.
    VestingDistribute {
        contract_address: AccountAddress,
    },

    /// Call `distribute` for many vesting contracts.
    VestingDistributeMany {
        contract_addresses: Vec<AccountAddress>,
    },

    /// Remove the beneficiary for the given shareholder. All distributions will sent directly to the shareholder
    /// account.
    VestingResetBeneficiary {
        contract_address: AccountAddress,
        shareholder: AccountAddress,
    },

    VestingResetLockup {
        contract_address: AccountAddress,
    },

    VestingSetBeneficiary {
        contract_address: AccountAddress,
        shareholder: AccountAddress,
        new_beneficiary: AccountAddress,
    },

    /// Set the beneficiary for the operator.
    VestingSetBeneficiaryForOperator {
        new_beneficiary: AccountAddress,
    },

    VestingSetBeneficiaryResetter {
        contract_address: AccountAddress,
        beneficiary_resetter: AccountAddress,
    },

    VestingSetManagementRole {
        contract_address: AccountAddress,
        role: Vec<u8>,
        role_holder: AccountAddress,
    },

    /// Terminate the vesting contract and send all funds back to the withdrawal address.
    VestingTerminateVestingContract {
        contract_address: AccountAddress,
    },

    /// Unlock any accumulated rewards.
    VestingUnlockRewards {
        contract_address: AccountAddress,
    },

    /// Call `unlock_rewards` for many vesting contracts.
    VestingUnlockRewardsMany {
        contract_addresses: Vec<AccountAddress>,
    },

    VestingUpdateCommissionPercentage {
        contract_address: AccountAddress,
        new_commission_percentage: u64,
    },

    VestingUpdateOperator {
        contract_address: AccountAddress,
        new_operator: AccountAddress,
        commission_percentage: u64,
    },

    VestingUpdateOperatorWithSameCommission {
        contract_address: AccountAddress,
        new_operator: AccountAddress,
    },

    VestingUpdateVoter {
        contract_address: AccountAddress,
        new_voter: AccountAddress,
    },

    /// Unlock any vested portion of the grant.
    VestingVest {
        contract_address: AccountAddress,
    },

    /// Call `vest` for many vesting contracts.
    VestingVestMany {
        contract_addresses: Vec<AccountAddress>,
    },
}

impl EntryFunctionCall {
    /// Build an Endless `TransactionPayload` from a structured object `EntryFunctionCall`.
    pub fn encode(self) -> TransactionPayload {
        use EntryFunctionCall::*;
        match self {
            AccountAddAuthenticationKey {} => account_add_authentication_key(),
            AccountBatchAddAuthenticationKey {
                num_signatures_required,
            } => account_batch_add_authentication_key(num_signatures_required),
            AccountBatchRemoveAuthenticationKey {
                auth_keys,
                num_signatures_required,
            } => account_batch_remove_authentication_key(auth_keys, num_signatures_required),
            AccountCreateMultisigAccount {
                num_signatures_required,
            } => account_create_multisig_account(num_signatures_required),
            AccountRemoveAuthenticationKey { auth_key } => {
                account_remove_authentication_key(auth_key)
            },
            AccountSetNumSignaturesRequired {
                num_signatures_required,
            } => account_set_num_signatures_required(num_signatures_required),
            AccountSwapAuthenticationKey { old_auth_key } => {
                account_swap_authentication_key(old_auth_key)
            },
            CodePublishPackageTxn {
                metadata_serialized,
                code,
            } => code_publish_package_txn(metadata_serialized, code),
            DelegationPoolAddStake {
                pool_address,
                amount,
            } => delegation_pool_add_stake(pool_address, amount),
            DelegationPoolCreateProposal {
                pool_address,
                execution_hash,
                metadata_location,
                metadata_hash,
                is_multi_step_proposal,
            } => delegation_pool_create_proposal(
                pool_address,
                execution_hash,
                metadata_location,
                metadata_hash,
                is_multi_step_proposal,
            ),
            DelegationPoolDelegateVotingPower {
                pool_address,
                new_voter,
            } => delegation_pool_delegate_voting_power(pool_address, new_voter),
            DelegationPoolEnablePartialGovernanceVoting { pool_address } => {
                delegation_pool_enable_partial_governance_voting(pool_address)
            },
            DelegationPoolInitializeDelegationPool {
                operator_commission_percentage,
                delegation_pool_creation_seed,
            } => delegation_pool_initialize_delegation_pool(
                operator_commission_percentage,
                delegation_pool_creation_seed,
            ),
            DelegationPoolReactivateStake {
                pool_address,
                amount,
            } => delegation_pool_reactivate_stake(pool_address, amount),
            DelegationPoolSetBeneficiaryForOperator { new_beneficiary } => {
                delegation_pool_set_beneficiary_for_operator(new_beneficiary)
            },
            DelegationPoolSetDelegatedVoter { new_voter } => {
                delegation_pool_set_delegated_voter(new_voter)
            },
            DelegationPoolSetOperator { new_operator } => {
                delegation_pool_set_operator(new_operator)
            },
            DelegationPoolSynchronizeDelegationPool { pool_address } => {
                delegation_pool_synchronize_delegation_pool(pool_address)
            },
            DelegationPoolUnlock {
                pool_address,
                amount,
            } => delegation_pool_unlock(pool_address, amount),
            DelegationPoolUpdateCommissionPercentage {
                new_commission_percentage,
            } => delegation_pool_update_commission_percentage(new_commission_percentage),
            DelegationPoolVote {
                pool_address,
                proposal_id,
                voting_power,
                should_pass,
            } => delegation_pool_vote(pool_address, proposal_id, voting_power, should_pass),
            DelegationPoolWithdraw {
                pool_address,
                amount,
            } => delegation_pool_withdraw(pool_address, amount),
            EndlessAccountBatchTransfer {
                recipients,
                amounts,
            } => endless_account_batch_transfer(recipients, amounts),
            EndlessAccountCreateAccount { auth_key } => endless_account_create_account(auth_key),
            EndlessAccountSetAllowDirectCoinTransfers { allow } => {
                endless_account_set_allow_direct_coin_transfers(allow)
            },
            EndlessAccountTransfer { to, amount } => endless_account_transfer(to, amount),
            EndlessCoinClaimMintCapability {} => endless_coin_claim_mint_capability(),
            EndlessCoinDelegateMintCapability { to } => endless_coin_delegate_mint_capability(to),
            EndlessCoinMint { dst_addr, amount } => endless_coin_mint(dst_addr, amount),
            EndlessCoinTransfer { to, amount } => endless_coin_transfer(to, amount),
            EndlessGovernanceAddApprovedScriptHashScript { proposal_id } => {
                endless_governance_add_approved_script_hash_script(proposal_id)
            },
            EndlessGovernanceCreateProposal {
                stake_pool,
                execution_hash,
                metadata_location,
                metadata_hash,
            } => endless_governance_create_proposal(
                stake_pool,
                execution_hash,
                metadata_location,
                metadata_hash,
            ),
            EndlessGovernanceCreateProposalV2 {
                stake_pool,
                execution_hash,
                metadata_location,
                metadata_hash,
                is_multi_step_proposal,
            } => endless_governance_create_proposal_v2(
                stake_pool,
                execution_hash,
                metadata_location,
                metadata_hash,
                is_multi_step_proposal,
            ),
            EndlessGovernanceForceEndEpochTestOnly {} => {
                endless_governance_force_end_epoch_test_only()
            },
            EndlessGovernancePartialVote {
                stake_pool,
                proposal_id,
                voting_power,
                should_pass,
            } => {
                endless_governance_partial_vote(stake_pool, proposal_id, voting_power, should_pass)
            },
            EndlessGovernanceVote {
                stake_pool,
                proposal_id,
                should_pass,
            } => endless_governance_vote(stake_pool, proposal_id, should_pass),
            FaucetFund { dst_addr } => faucet_fund(dst_addr),
            LockingCoinExAddLockingPlan {
                token_address,
                reciever,
                total_coins,
                first_unlock_percent,
                first_unlock_epoch,
                stable_unlock_interval,
                stable_unlock_periods,
            } => locking_coin_ex_add_locking_plan(
                token_address,
                reciever,
                total_coins,
                first_unlock_percent,
                first_unlock_epoch,
                stable_unlock_interval,
                stable_unlock_periods,
            ),
            LockingCoinExAddLockingPlanFromUnlockedBalance {
                token_address,
                reciever,
                total_coins,
                first_unlock_percent,
                first_unlock_epoch,
                stable_unlock_interval,
                stable_unlock_periods,
            } => locking_coin_ex_add_locking_plan_from_unlocked_balance(
                token_address,
                reciever,
                total_coins,
                first_unlock_percent,
                first_unlock_epoch,
                stable_unlock_interval,
                stable_unlock_periods,
            ),
            LockingCoinExClaim {
                token_address,
                amount,
            } => locking_coin_ex_claim(token_address, amount),
            MultisigAccountApproveTransaction {
                multisig_account,
                sequence_number,
            } => multisig_account_approve_transaction(multisig_account, sequence_number),
            MultisigAccountCreateTransaction {
                multisig_account,
                payload,
            } => multisig_account_create_transaction(multisig_account, payload),
            MultisigAccountCreateTransactionWithHash {
                multisig_account,
                payload_hash,
            } => multisig_account_create_transaction_with_hash(multisig_account, payload_hash),
            MultisigAccountExecuteRejectedTransaction { multisig_account } => {
                multisig_account_execute_rejected_transaction(multisig_account)
            },
            MultisigAccountRejectTransaction {
                multisig_account,
                sequence_number,
            } => multisig_account_reject_transaction(multisig_account, sequence_number),
            MultisigAccountVoteTransanction {
                multisig_account,
                sequence_number,
                approved,
            } => multisig_account_vote_transanction(multisig_account, sequence_number, approved),
            ObjectTransferCall { object, to } => object_transfer_call(object, to),
            ObjectCodeDeploymentPublish {
                metadata_serialized,
                code,
            } => object_code_deployment_publish(metadata_serialized, code),
            ResourceAccountCreateResourceAccount {
                seed,
                optional_auth_key,
            } => resource_account_create_resource_account(seed, optional_auth_key),
            ResourceAccountCreateResourceAccountAndFund {
                seed,
                optional_auth_key,
                fund_amount,
            } => resource_account_create_resource_account_and_fund(
                seed,
                optional_auth_key,
                fund_amount,
            ),
            ResourceAccountCreateResourceAccountAndPublishPackage {
                seed,
                metadata_serialized,
                code,
            } => resource_account_create_resource_account_and_publish_package(
                seed,
                metadata_serialized,
                code,
            ),
            StakeAddStake { amount } => stake_add_stake(amount),
            StakeIncreaseLockup {} => stake_increase_lockup(),
            StakeInitializeStakeOwner {
                initial_stake_amount,
                operator,
                voter,
            } => stake_initialize_stake_owner(initial_stake_amount, operator, voter),
            StakeInitializeValidator {
                consensus_pubkey,
                proof_of_possession,
                network_addresses,
                fullnode_addresses,
            } => stake_initialize_validator(
                consensus_pubkey,
                proof_of_possession,
                network_addresses,
                fullnode_addresses,
            ),
            StakeJoinValidatorSet { pool_address } => stake_join_validator_set(pool_address),
            StakeLeaveValidatorSet { pool_address } => stake_leave_validator_set(pool_address),
            StakeReactivateStake { amount } => stake_reactivate_stake(amount),
            StakeRotateConsensusKey {
                pool_address,
                new_consensus_pubkey,
                proof_of_possession,
            } => {
                stake_rotate_consensus_key(pool_address, new_consensus_pubkey, proof_of_possession)
            },
            StakeSetDelegatedVoter { new_voter } => stake_set_delegated_voter(new_voter),
            StakeSetOperator { new_operator } => stake_set_operator(new_operator),
            StakeUnlock { amount } => stake_unlock(amount),
            StakeUpdateNetworkAndFullnodeAddresses {
                pool_address,
                new_network_addresses,
                new_fullnode_addresses,
            } => stake_update_network_and_fullnode_addresses(
                pool_address,
                new_network_addresses,
                new_fullnode_addresses,
            ),
            StakeWithdraw { withdraw_amount } => stake_withdraw(withdraw_amount),
            StakingContractAddStake { operator, amount } => {
                staking_contract_add_stake(operator, amount)
            },
            StakingContractCreateStakingContract {
                operator,
                voter,
                amount,
                commission_percentage,
                contract_creation_seed,
            } => staking_contract_create_staking_contract(
                operator,
                voter,
                amount,
                commission_percentage,
                contract_creation_seed,
            ),
            StakingContractDistribute { staker, operator } => {
                staking_contract_distribute(staker, operator)
            },
            StakingContractRequestCommission { staker, operator } => {
                staking_contract_request_commission(staker, operator)
            },
            StakingContractResetLockup { operator } => staking_contract_reset_lockup(operator),
            StakingContractSetBeneficiaryForOperator { new_beneficiary } => {
                staking_contract_set_beneficiary_for_operator(new_beneficiary)
            },
            StakingContractSwitchOperator {
                old_operator,
                new_operator,
                new_commission_percentage,
            } => staking_contract_switch_operator(
                old_operator,
                new_operator,
                new_commission_percentage,
            ),
            StakingContractSwitchOperatorWithSameCommission {
                old_operator,
                new_operator,
            } => staking_contract_switch_operator_with_same_commission(old_operator, new_operator),
            StakingContractUnlockRewards { operator } => staking_contract_unlock_rewards(operator),
            StakingContractUnlockStake { operator, amount } => {
                staking_contract_unlock_stake(operator, amount)
            },
            StakingContractUpdateCommision {
                operator,
                new_commission_percentage,
            } => staking_contract_update_commision(operator, new_commission_percentage),
            StakingContractUpdateVoter {
                operator,
                new_voter,
            } => staking_contract_update_voter(operator, new_voter),
            StakingProxySetOperator {
                old_operator,
                new_operator,
            } => staking_proxy_set_operator(old_operator, new_operator),
            StakingProxySetStakePoolOperator { new_operator } => {
                staking_proxy_set_stake_pool_operator(new_operator)
            },
            StakingProxySetStakePoolVoter { new_voter } => {
                staking_proxy_set_stake_pool_voter(new_voter)
            },
            StakingProxySetStakingContractOperator {
                old_operator,
                new_operator,
            } => staking_proxy_set_staking_contract_operator(old_operator, new_operator),
            StakingProxySetStakingContractVoter {
                operator,
                new_voter,
            } => staking_proxy_set_staking_contract_voter(operator, new_voter),
            StakingProxySetVestingContractOperator {
                old_operator,
                new_operator,
            } => staking_proxy_set_vesting_contract_operator(old_operator, new_operator),
            StakingProxySetVestingContractVoter {
                operator,
                new_voter,
            } => staking_proxy_set_vesting_contract_voter(operator, new_voter),
            StakingProxySetVoter {
                operator,
                new_voter,
            } => staking_proxy_set_voter(operator, new_voter),
            VersionSetForNextEpoch { major } => version_set_for_next_epoch(major),
            VestingAdminWithdraw { contract_address } => vesting_admin_withdraw(contract_address),
            VestingDistribute { contract_address } => vesting_distribute(contract_address),
            VestingDistributeMany { contract_addresses } => {
                vesting_distribute_many(contract_addresses)
            },
            VestingResetBeneficiary {
                contract_address,
                shareholder,
            } => vesting_reset_beneficiary(contract_address, shareholder),
            VestingResetLockup { contract_address } => vesting_reset_lockup(contract_address),
            VestingSetBeneficiary {
                contract_address,
                shareholder,
                new_beneficiary,
            } => vesting_set_beneficiary(contract_address, shareholder, new_beneficiary),
            VestingSetBeneficiaryForOperator { new_beneficiary } => {
                vesting_set_beneficiary_for_operator(new_beneficiary)
            },
            VestingSetBeneficiaryResetter {
                contract_address,
                beneficiary_resetter,
            } => vesting_set_beneficiary_resetter(contract_address, beneficiary_resetter),
            VestingSetManagementRole {
                contract_address,
                role,
                role_holder,
            } => vesting_set_management_role(contract_address, role, role_holder),
            VestingTerminateVestingContract { contract_address } => {
                vesting_terminate_vesting_contract(contract_address)
            },
            VestingUnlockRewards { contract_address } => vesting_unlock_rewards(contract_address),
            VestingUnlockRewardsMany { contract_addresses } => {
                vesting_unlock_rewards_many(contract_addresses)
            },
            VestingUpdateCommissionPercentage {
                contract_address,
                new_commission_percentage,
            } => vesting_update_commission_percentage(contract_address, new_commission_percentage),
            VestingUpdateOperator {
                contract_address,
                new_operator,
                commission_percentage,
            } => vesting_update_operator(contract_address, new_operator, commission_percentage),
            VestingUpdateOperatorWithSameCommission {
                contract_address,
                new_operator,
            } => vesting_update_operator_with_same_commission(contract_address, new_operator),
            VestingUpdateVoter {
                contract_address,
                new_voter,
            } => vesting_update_voter(contract_address, new_voter),
            VestingVest { contract_address } => vesting_vest(contract_address),
            VestingVestMany { contract_addresses } => vesting_vest_many(contract_addresses),
        }
    }

    /// Try to recognize an Endless `TransactionPayload` and convert it into a structured object `EntryFunctionCall`.
    pub fn decode(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            match SCRIPT_FUNCTION_DECODER_MAP.get(&format!(
                "{}_{}",
                script.module().name(),
                script.function()
            )) {
                Some(decoder) => decoder(payload),
                None => None,
            }
        } else {
            None
        }
    }
}

/// Add `new_author` to the account's `authentication_key`.
pub fn account_add_authentication_key() -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("account").to_owned(),
        ),
        ident_str!("add_authentication_key").to_owned(),
        vec![],
        vec![],
    ))
}

/// Similar to `add_authentication_key` but batch adding
/// And can set `num_signatures_required`
pub fn account_batch_add_authentication_key(num_signatures_required: u64) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("account").to_owned(),
        ),
        ident_str!("batch_add_authentication_key").to_owned(),
        vec![],
        vec![bcs::to_bytes(&num_signatures_required).unwrap()],
    ))
}

/// Similar to `remove_authentication_key` but batch removing
/// And can update `num_signatures_required`
pub fn account_batch_remove_authentication_key(
    auth_keys: Vec<Vec<u8>>,
    num_signatures_required: u64,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("account").to_owned(),
        ),
        ident_str!("batch_remove_authentication_key").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&auth_keys).unwrap(),
            bcs::to_bytes(&num_signatures_required).unwrap(),
        ],
    ))
}

/// Create a multisig account which owned by `owners`
/// Note that `creator` is not included unless it is one of `owners`
pub fn account_create_multisig_account(num_signatures_required: u64) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("account").to_owned(),
        ),
        ident_str!("create_multisig_account").to_owned(),
        vec![],
        vec![bcs::to_bytes(&num_signatures_required).unwrap()],
    ))
}

/// Remove `auth_key` from the account's `authentication_key`.
/// If the `auth_key` is not in the account's `authentication_key`, this function will do nothing.
/// If the `authentication_key`'s length less than `num_signatures_required` after remove, it will fail
pub fn account_remove_authentication_key(auth_key: Vec<u8>) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("account").to_owned(),
        ),
        ident_str!("remove_authentication_key").to_owned(),
        vec![],
        vec![bcs::to_bytes(&auth_key).unwrap()],
    ))
}

/// Update the number of signatures required, it will fail if
/// 1. `num_signatures_required` is 0
/// 2. `num_signatures_required` is greater than the number of keys in `authentication_key`
pub fn account_set_num_signatures_required(num_signatures_required: u64) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("account").to_owned(),
        ),
        ident_str!("set_num_signatures_required").to_owned(),
        vec![],
        vec![bcs::to_bytes(&num_signatures_required).unwrap()],
    ))
}

/// Replace `old_auth_key` with `new_auth`
pub fn account_swap_authentication_key(old_auth_key: Vec<u8>) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("account").to_owned(),
        ),
        ident_str!("swap_authentication_key").to_owned(),
        vec![],
        vec![bcs::to_bytes(&old_auth_key).unwrap()],
    ))
}

/// Same as `publish_package` but as an entry function which can be called as a transaction. Because
/// of current restrictions for txn parameters, the metadata needs to be passed in serialized form.
pub fn code_publish_package_txn(
    metadata_serialized: Vec<u8>,
    code: Vec<Vec<u8>>,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("code").to_owned(),
        ),
        ident_str!("publish_package_txn").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&metadata_serialized).unwrap(),
            bcs::to_bytes(&code).unwrap(),
        ],
    ))
}

/// Add `amount` of coins to the delegation pool `pool_address`.
pub fn delegation_pool_add_stake(pool_address: AccountAddress, amount: u128) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("delegation_pool").to_owned(),
        ),
        ident_str!("add_stake").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&pool_address).unwrap(),
            bcs::to_bytes(&amount).unwrap(),
        ],
    ))
}

/// A voter could create a governance proposal by this function. To successfully create a proposal, the voter's
/// voting power in THIS delegation pool must be not less than the minimum required voting power specified in
/// `endless_governance.move`.
pub fn delegation_pool_create_proposal(
    pool_address: AccountAddress,
    execution_hash: Vec<u8>,
    metadata_location: Vec<u8>,
    metadata_hash: Vec<u8>,
    is_multi_step_proposal: bool,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("delegation_pool").to_owned(),
        ),
        ident_str!("create_proposal").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&pool_address).unwrap(),
            bcs::to_bytes(&execution_hash).unwrap(),
            bcs::to_bytes(&metadata_location).unwrap(),
            bcs::to_bytes(&metadata_hash).unwrap(),
            bcs::to_bytes(&is_multi_step_proposal).unwrap(),
        ],
    ))
}

/// Allows a delegator to delegate its voting power to a voter. If this delegator already has a delegated voter,
/// this change won't take effects until the next lockup period.
pub fn delegation_pool_delegate_voting_power(
    pool_address: AccountAddress,
    new_voter: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("delegation_pool").to_owned(),
        ),
        ident_str!("delegate_voting_power").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&pool_address).unwrap(),
            bcs::to_bytes(&new_voter).unwrap(),
        ],
    ))
}

/// Enable partial governance voting on a stake pool. The voter of this stake pool will be managed by this module.
/// THe existing voter will be replaced. The function is permissionless.
pub fn delegation_pool_enable_partial_governance_voting(
    pool_address: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("delegation_pool").to_owned(),
        ),
        ident_str!("enable_partial_governance_voting").to_owned(),
        vec![],
        vec![bcs::to_bytes(&pool_address).unwrap()],
    ))
}

/// Initialize a delegation pool of custom fixed `operator_commission_percentage`.
/// A resource account is created from `owner` signer and its supplied `delegation_pool_creation_seed`
/// to host the delegation pool resource and own the underlying stake pool.
/// Ownership over setting the operator/voter is granted to `owner` who has both roles initially.
pub fn delegation_pool_initialize_delegation_pool(
    operator_commission_percentage: u64,
    delegation_pool_creation_seed: Vec<u8>,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("delegation_pool").to_owned(),
        ),
        ident_str!("initialize_delegation_pool").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&operator_commission_percentage).unwrap(),
            bcs::to_bytes(&delegation_pool_creation_seed).unwrap(),
        ],
    ))
}

/// Move `amount` of coins from pending_inactive to active.
pub fn delegation_pool_reactivate_stake(
    pool_address: AccountAddress,
    amount: u128,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("delegation_pool").to_owned(),
        ),
        ident_str!("reactivate_stake").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&pool_address).unwrap(),
            bcs::to_bytes(&amount).unwrap(),
        ],
    ))
}

/// Allows an operator to change its beneficiary. Any existing unpaid commission rewards will be paid to the new
/// beneficiary. To ensures payment to the current beneficiary, one should first call `synchronize_delegation_pool`
/// before switching the beneficiary. An operator can set one beneficiary for delegation pools, not a separate
/// one for each pool.
pub fn delegation_pool_set_beneficiary_for_operator(
    new_beneficiary: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("delegation_pool").to_owned(),
        ),
        ident_str!("set_beneficiary_for_operator").to_owned(),
        vec![],
        vec![bcs::to_bytes(&new_beneficiary).unwrap()],
    ))
}

/// Allows an owner to change the delegated voter of the underlying stake pool.
pub fn delegation_pool_set_delegated_voter(new_voter: AccountAddress) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("delegation_pool").to_owned(),
        ),
        ident_str!("set_delegated_voter").to_owned(),
        vec![],
        vec![bcs::to_bytes(&new_voter).unwrap()],
    ))
}

/// Allows an owner to change the operator of the underlying stake pool.
pub fn delegation_pool_set_operator(new_operator: AccountAddress) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("delegation_pool").to_owned(),
        ),
        ident_str!("set_operator").to_owned(),
        vec![],
        vec![bcs::to_bytes(&new_operator).unwrap()],
    ))
}

/// Synchronize delegation and stake pools: distribute yet-undetected rewards to the corresponding internal
/// shares pools, assign commission to operator and eventually prepare delegation pool for a new lockup cycle.
pub fn delegation_pool_synchronize_delegation_pool(
    pool_address: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("delegation_pool").to_owned(),
        ),
        ident_str!("synchronize_delegation_pool").to_owned(),
        vec![],
        vec![bcs::to_bytes(&pool_address).unwrap()],
    ))
}

/// Unlock `amount` from the active + pending_active stake of `delegator` or
/// at most how much active stake there is on the stake pool.
pub fn delegation_pool_unlock(pool_address: AccountAddress, amount: u128) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("delegation_pool").to_owned(),
        ),
        ident_str!("unlock").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&pool_address).unwrap(),
            bcs::to_bytes(&amount).unwrap(),
        ],
    ))
}

/// Allows an owner to update the commission percentage for the operator of the underlying stake pool.
pub fn delegation_pool_update_commission_percentage(
    new_commission_percentage: u64,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("delegation_pool").to_owned(),
        ),
        ident_str!("update_commission_percentage").to_owned(),
        vec![],
        vec![bcs::to_bytes(&new_commission_percentage).unwrap()],
    ))
}

/// Vote on a proposal with a voter's voting power. To successfully vote, the following conditions must be met:
/// 1. The voting period of the proposal hasn't ended.
/// 2. The delegation pool's lockup period ends after the voting period of the proposal.
/// 3. The voter still has spare voting power on this proposal.
/// 4. The delegation pool never votes on the proposal before enabling partial governance voting.
pub fn delegation_pool_vote(
    pool_address: AccountAddress,
    proposal_id: u64,
    voting_power: u128,
    should_pass: bool,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("delegation_pool").to_owned(),
        ),
        ident_str!("vote").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&pool_address).unwrap(),
            bcs::to_bytes(&proposal_id).unwrap(),
            bcs::to_bytes(&voting_power).unwrap(),
            bcs::to_bytes(&should_pass).unwrap(),
        ],
    ))
}

/// Withdraw `amount` of owned inactive stake from the delegation pool at `pool_address`.
pub fn delegation_pool_withdraw(pool_address: AccountAddress, amount: u128) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("delegation_pool").to_owned(),
        ),
        ident_str!("withdraw").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&pool_address).unwrap(),
            bcs::to_bytes(&amount).unwrap(),
        ],
    ))
}

/// Batch version of EDS transfer.
pub fn endless_account_batch_transfer(
    recipients: Vec<AccountAddress>,
    amounts: Vec<u128>,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("endless_account").to_owned(),
        ),
        ident_str!("batch_transfer").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&recipients).unwrap(),
            bcs::to_bytes(&amounts).unwrap(),
        ],
    ))
}

/// Basic account creation methods.
pub fn endless_account_create_account(auth_key: AccountAddress) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("endless_account").to_owned(),
        ),
        ident_str!("create_account").to_owned(),
        vec![],
        vec![bcs::to_bytes(&auth_key).unwrap()],
    ))
}

/// Set whether `account` can receive direct transfers of coins that they have not explicitly registered to receive.
pub fn endless_account_set_allow_direct_coin_transfers(allow: bool) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("endless_account").to_owned(),
        ),
        ident_str!("set_allow_direct_coin_transfers").to_owned(),
        vec![],
        vec![bcs::to_bytes(&allow).unwrap()],
    ))
}

/// Convenient function to transfer EDS to a recipient account that might not exist.
/// This would create the recipient account first, which also registers it to receive EDS, before transferring.
pub fn endless_account_transfer(to: AccountAddress, amount: u128) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("endless_account").to_owned(),
        ),
        ident_str!("transfer").to_owned(),
        vec![],
        vec![bcs::to_bytes(&to).unwrap(), bcs::to_bytes(&amount).unwrap()],
    ))
}

/// Only callable in tests and testnets where the core resources account exists.
/// Claim the delegated mint capability and destroy the delegated token.
pub fn endless_coin_claim_mint_capability() -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("endless_coin").to_owned(),
        ),
        ident_str!("claim_mint_capability").to_owned(),
        vec![],
        vec![],
    ))
}

/// Only callable in tests and testnets where the core resources account exists.
/// Create delegated token for the address so the account could claim MintCapability later.
pub fn endless_coin_delegate_mint_capability(to: AccountAddress) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("endless_coin").to_owned(),
        ),
        ident_str!("delegate_mint_capability").to_owned(),
        vec![],
        vec![bcs::to_bytes(&to).unwrap()],
    ))
}

/// Only callable in tests and testnets where the core resources account exists.
/// Create new coins and deposit them into dst_addr's account.
pub fn endless_coin_mint(dst_addr: AccountAddress, amount: u128) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("endless_coin").to_owned(),
        ),
        ident_str!("mint").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&dst_addr).unwrap(),
            bcs::to_bytes(&amount).unwrap(),
        ],
    ))
}

pub fn endless_coin_transfer(to: AccountAddress, amount: u128) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("endless_coin").to_owned(),
        ),
        ident_str!("transfer").to_owned(),
        vec![],
        vec![bcs::to_bytes(&to).unwrap(), bcs::to_bytes(&amount).unwrap()],
    ))
}

pub fn endless_governance_add_approved_script_hash_script(proposal_id: u64) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("endless_governance").to_owned(),
        ),
        ident_str!("add_approved_script_hash_script").to_owned(),
        vec![],
        vec![bcs::to_bytes(&proposal_id).unwrap()],
    ))
}

/// Create a single-step proposal with the backing `stake_pool`.
/// @param execution_hash Required. This is the hash of the resolution script. When the proposal is resolved,
/// only the exact script with matching hash can be successfully executed.
pub fn endless_governance_create_proposal(
    stake_pool: AccountAddress,
    execution_hash: Vec<u8>,
    metadata_location: Vec<u8>,
    metadata_hash: Vec<u8>,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("endless_governance").to_owned(),
        ),
        ident_str!("create_proposal").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&stake_pool).unwrap(),
            bcs::to_bytes(&execution_hash).unwrap(),
            bcs::to_bytes(&metadata_location).unwrap(),
            bcs::to_bytes(&metadata_hash).unwrap(),
        ],
    ))
}

/// Create a single-step or multi-step proposal with the backing `stake_pool`.
/// @param execution_hash Required. This is the hash of the resolution script. When the proposal is resolved,
/// only the exact script with matching hash can be successfully executed.
pub fn endless_governance_create_proposal_v2(
    stake_pool: AccountAddress,
    execution_hash: Vec<u8>,
    metadata_location: Vec<u8>,
    metadata_hash: Vec<u8>,
    is_multi_step_proposal: bool,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("endless_governance").to_owned(),
        ),
        ident_str!("create_proposal_v2").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&stake_pool).unwrap(),
            bcs::to_bytes(&execution_hash).unwrap(),
            bcs::to_bytes(&metadata_location).unwrap(),
            bcs::to_bytes(&metadata_hash).unwrap(),
            bcs::to_bytes(&is_multi_step_proposal).unwrap(),
        ],
    ))
}

/// `force_end_epoch()` equivalent but only called in testnet,
/// where the core resources account exists and has been granted power to mint Endelss coins.
pub fn endless_governance_force_end_epoch_test_only() -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("endless_governance").to_owned(),
        ),
        ident_str!("force_end_epoch_test_only").to_owned(),
        vec![],
        vec![],
    ))
}

/// Vote on proposal with `proposal_id` and specified voting power from `stake_pool`.
pub fn endless_governance_partial_vote(
    stake_pool: AccountAddress,
    proposal_id: u64,
    voting_power: u128,
    should_pass: bool,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("endless_governance").to_owned(),
        ),
        ident_str!("partial_vote").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&stake_pool).unwrap(),
            bcs::to_bytes(&proposal_id).unwrap(),
            bcs::to_bytes(&voting_power).unwrap(),
            bcs::to_bytes(&should_pass).unwrap(),
        ],
    ))
}

/// Vote on proposal with `proposal_id` and all voting power from `stake_pool`.
pub fn endless_governance_vote(
    stake_pool: AccountAddress,
    proposal_id: u64,
    should_pass: bool,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("endless_governance").to_owned(),
        ),
        ident_str!("vote").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&stake_pool).unwrap(),
            bcs::to_bytes(&proposal_id).unwrap(),
            bcs::to_bytes(&should_pass).unwrap(),
        ],
    ))
}

pub fn faucet_fund(dst_addr: AccountAddress) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("faucet").to_owned(),
        ),
        ident_str!("fund").to_owned(),
        vec![],
        vec![bcs::to_bytes(&dst_addr).unwrap()],
    ))
}

pub fn locking_coin_ex_add_locking_plan(
    token_address: AccountAddress,
    reciever: AccountAddress,
    total_coins: u128,
    first_unlock_percent: u64,
    first_unlock_epoch: u64,
    stable_unlock_interval: u64,
    stable_unlock_periods: u64,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("locking_coin_ex").to_owned(),
        ),
        ident_str!("add_locking_plan").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&token_address).unwrap(),
            bcs::to_bytes(&reciever).unwrap(),
            bcs::to_bytes(&total_coins).unwrap(),
            bcs::to_bytes(&first_unlock_percent).unwrap(),
            bcs::to_bytes(&first_unlock_epoch).unwrap(),
            bcs::to_bytes(&stable_unlock_interval).unwrap(),
            bcs::to_bytes(&stable_unlock_periods).unwrap(),
        ],
    ))
}

/// Send locking coin to another address from free amount and unlock by plan
pub fn locking_coin_ex_add_locking_plan_from_unlocked_balance(
    token_address: AccountAddress,
    reciever: AccountAddress,
    total_coins: u128,
    first_unlock_percent: u64,
    first_unlock_epoch: u64,
    stable_unlock_interval: u64,
    stable_unlock_periods: u64,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("locking_coin_ex").to_owned(),
        ),
        ident_str!("add_locking_plan_from_unlocked_balance").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&token_address).unwrap(),
            bcs::to_bytes(&reciever).unwrap(),
            bcs::to_bytes(&total_coins).unwrap(),
            bcs::to_bytes(&first_unlock_percent).unwrap(),
            bcs::to_bytes(&first_unlock_epoch).unwrap(),
            bcs::to_bytes(&stable_unlock_interval).unwrap(),
            bcs::to_bytes(&stable_unlock_periods).unwrap(),
        ],
    ))
}

/// Claim coins when recipient has free amount.
pub fn locking_coin_ex_claim(token_address: AccountAddress, amount: u128) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("locking_coin_ex").to_owned(),
        ),
        ident_str!("claim").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&token_address).unwrap(),
            bcs::to_bytes(&amount).unwrap(),
        ],
    ))
}

/// Approve a multisig transaction.
pub fn multisig_account_approve_transaction(
    multisig_account: AccountAddress,
    sequence_number: u64,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("multisig_account").to_owned(),
        ),
        ident_str!("approve_transaction").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&multisig_account).unwrap(),
            bcs::to_bytes(&sequence_number).unwrap(),
        ],
    ))
}

/// Create a multisig transaction, which will have one approval initially (from the creator).
pub fn multisig_account_create_transaction(
    multisig_account: AccountAddress,
    payload: Vec<u8>,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("multisig_account").to_owned(),
        ),
        ident_str!("create_transaction").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&multisig_account).unwrap(),
            bcs::to_bytes(&payload).unwrap(),
        ],
    ))
}

/// Create a multisig transaction with a transaction hash instead of the full payload.
/// This means the payload will be stored off chain for gas saving. Later, during execution, the executor will need
/// to provide the full payload, which will be validated against the hash stored on-chain.
pub fn multisig_account_create_transaction_with_hash(
    multisig_account: AccountAddress,
    payload_hash: Vec<u8>,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("multisig_account").to_owned(),
        ),
        ident_str!("create_transaction_with_hash").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&multisig_account).unwrap(),
            bcs::to_bytes(&payload_hash).unwrap(),
        ],
    ))
}

/// Remove the next transaction if it has sufficient owner rejections.
pub fn multisig_account_execute_rejected_transaction(
    multisig_account: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("multisig_account").to_owned(),
        ),
        ident_str!("execute_rejected_transaction").to_owned(),
        vec![],
        vec![bcs::to_bytes(&multisig_account).unwrap()],
    ))
}

/// Reject a multisig transaction.
pub fn multisig_account_reject_transaction(
    multisig_account: AccountAddress,
    sequence_number: u64,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("multisig_account").to_owned(),
        ),
        ident_str!("reject_transaction").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&multisig_account).unwrap(),
            bcs::to_bytes(&sequence_number).unwrap(),
        ],
    ))
}

/// Generic function that can be used to either approve or reject a multisig transaction
pub fn multisig_account_vote_transanction(
    multisig_account: AccountAddress,
    sequence_number: u64,
    approved: bool,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("multisig_account").to_owned(),
        ),
        ident_str!("vote_transanction").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&multisig_account).unwrap(),
            bcs::to_bytes(&sequence_number).unwrap(),
            bcs::to_bytes(&approved).unwrap(),
        ],
    ))
}

/// Entry function that can be used to transfer, if allow_ungated_transfer is set true.
pub fn object_transfer_call(object: AccountAddress, to: AccountAddress) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("object").to_owned(),
        ),
        ident_str!("transfer_call").to_owned(),
        vec![],
        vec![bcs::to_bytes(&object).unwrap(), bcs::to_bytes(&to).unwrap()],
    ))
}

/// Creates a new object with a unique address derived from the publisher address and the object seed.
/// Publishes the code passed in the function to the newly created object.
/// The caller must provide package metadata describing the package via `metadata_serialized` and
/// the code to be published via `code`. This contains a vector of modules to be deployed on-chain.
pub fn object_code_deployment_publish(
    metadata_serialized: Vec<u8>,
    code: Vec<Vec<u8>>,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("object_code_deployment").to_owned(),
        ),
        ident_str!("publish").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&metadata_serialized).unwrap(),
            bcs::to_bytes(&code).unwrap(),
        ],
    ))
}

/// Creates a new resource account and rotates the authentication key to either
/// the optional auth key if it is non-empty (though auth keys are 32-bytes)
/// or the source accounts current auth key.
pub fn resource_account_create_resource_account(
    seed: Vec<u8>,
    optional_auth_key: Vec<Vec<u8>>,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("resource_account").to_owned(),
        ),
        ident_str!("create_resource_account").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&seed).unwrap(),
            bcs::to_bytes(&optional_auth_key).unwrap(),
        ],
    ))
}

/// Creates a new resource account, transfer the amount of coins from the origin to the resource
/// account, and rotates the authentication key to either the optional auth key if it is
/// non-empty (though auth keys are 32-bytes) or the source accounts current auth key. Note,
/// this function adds additional resource ownership to the resource account and should only be
/// used for resource accounts that need access to `Coin<EndlessCoin>`.
pub fn resource_account_create_resource_account_and_fund(
    seed: Vec<u8>,
    optional_auth_key: Vec<Vec<u8>>,
    fund_amount: u128,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("resource_account").to_owned(),
        ),
        ident_str!("create_resource_account_and_fund").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&seed).unwrap(),
            bcs::to_bytes(&optional_auth_key).unwrap(),
            bcs::to_bytes(&fund_amount).unwrap(),
        ],
    ))
}

/// Creates a new resource account, publishes the package under this account transaction under
/// this account and leaves the signer cap readily available for pickup.
pub fn resource_account_create_resource_account_and_publish_package(
    seed: Vec<u8>,
    metadata_serialized: Vec<u8>,
    code: Vec<Vec<u8>>,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("resource_account").to_owned(),
        ),
        ident_str!("create_resource_account_and_publish_package").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&seed).unwrap(),
            bcs::to_bytes(&metadata_serialized).unwrap(),
            bcs::to_bytes(&code).unwrap(),
        ],
    ))
}

/// Add `amount` of coins from the `account` owning the StakePool.
pub fn stake_add_stake(amount: u128) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("stake").to_owned(),
        ),
        ident_str!("add_stake").to_owned(),
        vec![],
        vec![bcs::to_bytes(&amount).unwrap()],
    ))
}

/// Similar to increase_lockup_with_cap but will use ownership capability from the signing account.
pub fn stake_increase_lockup() -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("stake").to_owned(),
        ),
        ident_str!("increase_lockup").to_owned(),
        vec![],
        vec![],
    ))
}

/// Initialize the validator account and give ownership to the signing account
/// except it leaves the ValidatorConfig to be set by another entity.
/// Note: this triggers setting the operator and owner, set it to the account's address
/// to set later.
pub fn stake_initialize_stake_owner(
    initial_stake_amount: u128,
    operator: AccountAddress,
    voter: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("stake").to_owned(),
        ),
        ident_str!("initialize_stake_owner").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&initial_stake_amount).unwrap(),
            bcs::to_bytes(&operator).unwrap(),
            bcs::to_bytes(&voter).unwrap(),
        ],
    ))
}

/// Initialize the validator account and give ownership to the signing account.
pub fn stake_initialize_validator(
    consensus_pubkey: Vec<u8>,
    proof_of_possession: Vec<u8>,
    network_addresses: Vec<u8>,
    fullnode_addresses: Vec<u8>,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("stake").to_owned(),
        ),
        ident_str!("initialize_validator").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&consensus_pubkey).unwrap(),
            bcs::to_bytes(&proof_of_possession).unwrap(),
            bcs::to_bytes(&network_addresses).unwrap(),
            bcs::to_bytes(&fullnode_addresses).unwrap(),
        ],
    ))
}

/// This can only called by the operator of the validator/staking pool.
pub fn stake_join_validator_set(pool_address: AccountAddress) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("stake").to_owned(),
        ),
        ident_str!("join_validator_set").to_owned(),
        vec![],
        vec![bcs::to_bytes(&pool_address).unwrap()],
    ))
}

/// Request to have `pool_address` leave the validator set. The validator is only actually removed from the set when
/// the next epoch starts.
/// The last validator in the set cannot leave. This is an edge case that should never happen as long as the network
/// is still operational.
///
/// Can only be called by the operator of the validator/staking pool.
pub fn stake_leave_validator_set(pool_address: AccountAddress) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("stake").to_owned(),
        ),
        ident_str!("leave_validator_set").to_owned(),
        vec![],
        vec![bcs::to_bytes(&pool_address).unwrap()],
    ))
}

/// Move `amount` of coins from pending_inactive to active.
pub fn stake_reactivate_stake(amount: u128) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("stake").to_owned(),
        ),
        ident_str!("reactivate_stake").to_owned(),
        vec![],
        vec![bcs::to_bytes(&amount).unwrap()],
    ))
}

/// Rotate the consensus key of the validator, it'll take effect in next epoch.
pub fn stake_rotate_consensus_key(
    pool_address: AccountAddress,
    new_consensus_pubkey: Vec<u8>,
    proof_of_possession: Vec<u8>,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("stake").to_owned(),
        ),
        ident_str!("rotate_consensus_key").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&pool_address).unwrap(),
            bcs::to_bytes(&new_consensus_pubkey).unwrap(),
            bcs::to_bytes(&proof_of_possession).unwrap(),
        ],
    ))
}

/// Allows an owner to change the delegated voter of the stake pool.
pub fn stake_set_delegated_voter(new_voter: AccountAddress) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("stake").to_owned(),
        ),
        ident_str!("set_delegated_voter").to_owned(),
        vec![],
        vec![bcs::to_bytes(&new_voter).unwrap()],
    ))
}

/// Allows an owner to change the operator of the stake pool.
pub fn stake_set_operator(new_operator: AccountAddress) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("stake").to_owned(),
        ),
        ident_str!("set_operator").to_owned(),
        vec![],
        vec![bcs::to_bytes(&new_operator).unwrap()],
    ))
}

/// Similar to unlock_with_cap but will use ownership capability from the signing account.
pub fn stake_unlock(amount: u128) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("stake").to_owned(),
        ),
        ident_str!("unlock").to_owned(),
        vec![],
        vec![bcs::to_bytes(&amount).unwrap()],
    ))
}

/// Update the network and full node addresses of the validator. This only takes effect in the next epoch.
pub fn stake_update_network_and_fullnode_addresses(
    pool_address: AccountAddress,
    new_network_addresses: Vec<u8>,
    new_fullnode_addresses: Vec<u8>,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("stake").to_owned(),
        ),
        ident_str!("update_network_and_fullnode_addresses").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&pool_address).unwrap(),
            bcs::to_bytes(&new_network_addresses).unwrap(),
            bcs::to_bytes(&new_fullnode_addresses).unwrap(),
        ],
    ))
}

/// Withdraw from `account`'s inactive stake.
pub fn stake_withdraw(withdraw_amount: u128) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("stake").to_owned(),
        ),
        ident_str!("withdraw").to_owned(),
        vec![],
        vec![bcs::to_bytes(&withdraw_amount).unwrap()],
    ))
}

/// Add more stake to an existing staking contract.
pub fn staking_contract_add_stake(operator: AccountAddress, amount: u128) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("staking_contract").to_owned(),
        ),
        ident_str!("add_stake").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&operator).unwrap(),
            bcs::to_bytes(&amount).unwrap(),
        ],
    ))
}

/// Staker can call this function to create a simple staking contract with a specified operator.
pub fn staking_contract_create_staking_contract(
    operator: AccountAddress,
    voter: AccountAddress,
    amount: u128,
    commission_percentage: u64,
    contract_creation_seed: Vec<u8>,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("staking_contract").to_owned(),
        ),
        ident_str!("create_staking_contract").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&operator).unwrap(),
            bcs::to_bytes(&voter).unwrap(),
            bcs::to_bytes(&amount).unwrap(),
            bcs::to_bytes(&commission_percentage).unwrap(),
            bcs::to_bytes(&contract_creation_seed).unwrap(),
        ],
    ))
}

/// Allow anyone to distribute already unlocked funds. This does not affect reward compounding and therefore does
/// not need to be restricted to just the staker or operator.
pub fn staking_contract_distribute(
    staker: AccountAddress,
    operator: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("staking_contract").to_owned(),
        ),
        ident_str!("distribute").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&staker).unwrap(),
            bcs::to_bytes(&operator).unwrap(),
        ],
    ))
}

/// Unlock commission amount from the stake pool. Operator needs to wait for the amount to become withdrawable
/// at the end of the stake pool's lockup period before they can actually can withdraw_commission.
///
/// Only staker, operator or beneficiary can call this.
pub fn staking_contract_request_commission(
    staker: AccountAddress,
    operator: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("staking_contract").to_owned(),
        ),
        ident_str!("request_commission").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&staker).unwrap(),
            bcs::to_bytes(&operator).unwrap(),
        ],
    ))
}

/// Convenient function to allow the staker to reset their stake pool's lockup period to start now.
pub fn staking_contract_reset_lockup(operator: AccountAddress) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("staking_contract").to_owned(),
        ),
        ident_str!("reset_lockup").to_owned(),
        vec![],
        vec![bcs::to_bytes(&operator).unwrap()],
    ))
}

/// Allows an operator to change its beneficiary. Any existing unpaid commission rewards will be paid to the new
/// beneficiary. To ensures payment to the current beneficiary, one should first call `distribute` before switching
/// the beneficiary. An operator can set one beneficiary for staking contract pools, not a separate one for each pool.
pub fn staking_contract_set_beneficiary_for_operator(
    new_beneficiary: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("staking_contract").to_owned(),
        ),
        ident_str!("set_beneficiary_for_operator").to_owned(),
        vec![],
        vec![bcs::to_bytes(&new_beneficiary).unwrap()],
    ))
}

/// Allows staker to switch operator without going through the lenghthy process to unstake.
pub fn staking_contract_switch_operator(
    old_operator: AccountAddress,
    new_operator: AccountAddress,
    new_commission_percentage: u64,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("staking_contract").to_owned(),
        ),
        ident_str!("switch_operator").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&old_operator).unwrap(),
            bcs::to_bytes(&new_operator).unwrap(),
            bcs::to_bytes(&new_commission_percentage).unwrap(),
        ],
    ))
}

/// Allows staker to switch operator without going through the lenghthy process to unstake, without resetting commission.
pub fn staking_contract_switch_operator_with_same_commission(
    old_operator: AccountAddress,
    new_operator: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("staking_contract").to_owned(),
        ),
        ident_str!("switch_operator_with_same_commission").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&old_operator).unwrap(),
            bcs::to_bytes(&new_operator).unwrap(),
        ],
    ))
}

/// Unlock all accumulated rewards since the last recorded principals.
pub fn staking_contract_unlock_rewards(operator: AccountAddress) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("staking_contract").to_owned(),
        ),
        ident_str!("unlock_rewards").to_owned(),
        vec![],
        vec![bcs::to_bytes(&operator).unwrap()],
    ))
}

/// Staker can call this to request withdrawal of part or all of their staking_contract.
/// This also triggers paying commission to the operator for accounting simplicity.
pub fn staking_contract_unlock_stake(operator: AccountAddress, amount: u128) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("staking_contract").to_owned(),
        ),
        ident_str!("unlock_stake").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&operator).unwrap(),
            bcs::to_bytes(&amount).unwrap(),
        ],
    ))
}

/// Convenience function to allow a staker to update the commission percentage paid to the operator.
/// TODO: fix the typo in function name. commision -> commission
pub fn staking_contract_update_commision(
    operator: AccountAddress,
    new_commission_percentage: u64,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("staking_contract").to_owned(),
        ),
        ident_str!("update_commision").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&operator).unwrap(),
            bcs::to_bytes(&new_commission_percentage).unwrap(),
        ],
    ))
}

/// Convenient function to allow the staker to update the voter address in a staking contract they made.
pub fn staking_contract_update_voter(
    operator: AccountAddress,
    new_voter: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("staking_contract").to_owned(),
        ),
        ident_str!("update_voter").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&operator).unwrap(),
            bcs::to_bytes(&new_voter).unwrap(),
        ],
    ))
}

pub fn staking_proxy_set_operator(
    old_operator: AccountAddress,
    new_operator: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("staking_proxy").to_owned(),
        ),
        ident_str!("set_operator").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&old_operator).unwrap(),
            bcs::to_bytes(&new_operator).unwrap(),
        ],
    ))
}

pub fn staking_proxy_set_stake_pool_operator(new_operator: AccountAddress) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("staking_proxy").to_owned(),
        ),
        ident_str!("set_stake_pool_operator").to_owned(),
        vec![],
        vec![bcs::to_bytes(&new_operator).unwrap()],
    ))
}

pub fn staking_proxy_set_stake_pool_voter(new_voter: AccountAddress) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("staking_proxy").to_owned(),
        ),
        ident_str!("set_stake_pool_voter").to_owned(),
        vec![],
        vec![bcs::to_bytes(&new_voter).unwrap()],
    ))
}

pub fn staking_proxy_set_staking_contract_operator(
    old_operator: AccountAddress,
    new_operator: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("staking_proxy").to_owned(),
        ),
        ident_str!("set_staking_contract_operator").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&old_operator).unwrap(),
            bcs::to_bytes(&new_operator).unwrap(),
        ],
    ))
}

pub fn staking_proxy_set_staking_contract_voter(
    operator: AccountAddress,
    new_voter: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("staking_proxy").to_owned(),
        ),
        ident_str!("set_staking_contract_voter").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&operator).unwrap(),
            bcs::to_bytes(&new_voter).unwrap(),
        ],
    ))
}

pub fn staking_proxy_set_vesting_contract_operator(
    old_operator: AccountAddress,
    new_operator: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("staking_proxy").to_owned(),
        ),
        ident_str!("set_vesting_contract_operator").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&old_operator).unwrap(),
            bcs::to_bytes(&new_operator).unwrap(),
        ],
    ))
}

pub fn staking_proxy_set_vesting_contract_voter(
    operator: AccountAddress,
    new_voter: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("staking_proxy").to_owned(),
        ),
        ident_str!("set_vesting_contract_voter").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&operator).unwrap(),
            bcs::to_bytes(&new_voter).unwrap(),
        ],
    ))
}

pub fn staking_proxy_set_voter(
    operator: AccountAddress,
    new_voter: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("staking_proxy").to_owned(),
        ),
        ident_str!("set_voter").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&operator).unwrap(),
            bcs::to_bytes(&new_voter).unwrap(),
        ],
    ))
}

/// Used in on-chain governances to update the major version for the next epoch.
/// Example usage:
/// - `endless_framework::version::set_for_next_epoch(&framework_signer, new_version);`
/// - `endless_framework::endless_governance::reconfigure(&framework_signer);`
pub fn version_set_for_next_epoch(major: u64) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("version").to_owned(),
        ),
        ident_str!("set_for_next_epoch").to_owned(),
        vec![],
        vec![bcs::to_bytes(&major).unwrap()],
    ))
}

/// Withdraw all funds to the preset vesting contract's withdrawal address. This can only be called if the contract
/// has already been terminated.
pub fn vesting_admin_withdraw(contract_address: AccountAddress) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("vesting").to_owned(),
        ),
        ident_str!("admin_withdraw").to_owned(),
        vec![],
        vec![bcs::to_bytes(&contract_address).unwrap()],
    ))
}

/// Distribute any withdrawable stake from the stake pool.
pub fn vesting_distribute(contract_address: AccountAddress) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("vesting").to_owned(),
        ),
        ident_str!("distribute").to_owned(),
        vec![],
        vec![bcs::to_bytes(&contract_address).unwrap()],
    ))
}

/// Call `distribute` for many vesting contracts.
pub fn vesting_distribute_many(contract_addresses: Vec<AccountAddress>) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("vesting").to_owned(),
        ),
        ident_str!("distribute_many").to_owned(),
        vec![],
        vec![bcs::to_bytes(&contract_addresses).unwrap()],
    ))
}

/// Remove the beneficiary for the given shareholder. All distributions will sent directly to the shareholder
/// account.
pub fn vesting_reset_beneficiary(
    contract_address: AccountAddress,
    shareholder: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("vesting").to_owned(),
        ),
        ident_str!("reset_beneficiary").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&contract_address).unwrap(),
            bcs::to_bytes(&shareholder).unwrap(),
        ],
    ))
}

pub fn vesting_reset_lockup(contract_address: AccountAddress) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("vesting").to_owned(),
        ),
        ident_str!("reset_lockup").to_owned(),
        vec![],
        vec![bcs::to_bytes(&contract_address).unwrap()],
    ))
}

pub fn vesting_set_beneficiary(
    contract_address: AccountAddress,
    shareholder: AccountAddress,
    new_beneficiary: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("vesting").to_owned(),
        ),
        ident_str!("set_beneficiary").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&contract_address).unwrap(),
            bcs::to_bytes(&shareholder).unwrap(),
            bcs::to_bytes(&new_beneficiary).unwrap(),
        ],
    ))
}

/// Set the beneficiary for the operator.
pub fn vesting_set_beneficiary_for_operator(new_beneficiary: AccountAddress) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("vesting").to_owned(),
        ),
        ident_str!("set_beneficiary_for_operator").to_owned(),
        vec![],
        vec![bcs::to_bytes(&new_beneficiary).unwrap()],
    ))
}

pub fn vesting_set_beneficiary_resetter(
    contract_address: AccountAddress,
    beneficiary_resetter: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("vesting").to_owned(),
        ),
        ident_str!("set_beneficiary_resetter").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&contract_address).unwrap(),
            bcs::to_bytes(&beneficiary_resetter).unwrap(),
        ],
    ))
}

pub fn vesting_set_management_role(
    contract_address: AccountAddress,
    role: Vec<u8>,
    role_holder: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("vesting").to_owned(),
        ),
        ident_str!("set_management_role").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&contract_address).unwrap(),
            bcs::to_bytes(&role).unwrap(),
            bcs::to_bytes(&role_holder).unwrap(),
        ],
    ))
}

/// Terminate the vesting contract and send all funds back to the withdrawal address.
pub fn vesting_terminate_vesting_contract(contract_address: AccountAddress) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("vesting").to_owned(),
        ),
        ident_str!("terminate_vesting_contract").to_owned(),
        vec![],
        vec![bcs::to_bytes(&contract_address).unwrap()],
    ))
}

/// Unlock any accumulated rewards.
pub fn vesting_unlock_rewards(contract_address: AccountAddress) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("vesting").to_owned(),
        ),
        ident_str!("unlock_rewards").to_owned(),
        vec![],
        vec![bcs::to_bytes(&contract_address).unwrap()],
    ))
}

/// Call `unlock_rewards` for many vesting contracts.
pub fn vesting_unlock_rewards_many(contract_addresses: Vec<AccountAddress>) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("vesting").to_owned(),
        ),
        ident_str!("unlock_rewards_many").to_owned(),
        vec![],
        vec![bcs::to_bytes(&contract_addresses).unwrap()],
    ))
}

pub fn vesting_update_commission_percentage(
    contract_address: AccountAddress,
    new_commission_percentage: u64,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("vesting").to_owned(),
        ),
        ident_str!("update_commission_percentage").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&contract_address).unwrap(),
            bcs::to_bytes(&new_commission_percentage).unwrap(),
        ],
    ))
}

pub fn vesting_update_operator(
    contract_address: AccountAddress,
    new_operator: AccountAddress,
    commission_percentage: u64,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("vesting").to_owned(),
        ),
        ident_str!("update_operator").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&contract_address).unwrap(),
            bcs::to_bytes(&new_operator).unwrap(),
            bcs::to_bytes(&commission_percentage).unwrap(),
        ],
    ))
}

pub fn vesting_update_operator_with_same_commission(
    contract_address: AccountAddress,
    new_operator: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("vesting").to_owned(),
        ),
        ident_str!("update_operator_with_same_commission").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&contract_address).unwrap(),
            bcs::to_bytes(&new_operator).unwrap(),
        ],
    ))
}

pub fn vesting_update_voter(
    contract_address: AccountAddress,
    new_voter: AccountAddress,
) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("vesting").to_owned(),
        ),
        ident_str!("update_voter").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&contract_address).unwrap(),
            bcs::to_bytes(&new_voter).unwrap(),
        ],
    ))
}

/// Unlock any vested portion of the grant.
pub fn vesting_vest(contract_address: AccountAddress) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("vesting").to_owned(),
        ),
        ident_str!("vest").to_owned(),
        vec![],
        vec![bcs::to_bytes(&contract_address).unwrap()],
    ))
}

/// Call `vest` for many vesting contracts.
pub fn vesting_vest_many(contract_addresses: Vec<AccountAddress>) -> TransactionPayload {
    TransactionPayload::EntryFunction(EntryFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("vesting").to_owned(),
        ),
        ident_str!("vest_many").to_owned(),
        vec![],
        vec![bcs::to_bytes(&contract_addresses).unwrap()],
    ))
}
mod decoder {
    use super::*;
    pub fn account_add_authentication_key(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(_script) = payload {
            Some(EntryFunctionCall::AccountAddAuthenticationKey {})
        } else {
            None
        }
    }

    pub fn account_batch_add_authentication_key(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::AccountBatchAddAuthenticationKey {
                num_signatures_required: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn account_batch_remove_authentication_key(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::AccountBatchRemoveAuthenticationKey {
                auth_keys: bcs::from_bytes(script.args().get(0)?).ok()?,
                num_signatures_required: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn account_create_multisig_account(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::AccountCreateMultisigAccount {
                num_signatures_required: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn account_remove_authentication_key(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::AccountRemoveAuthenticationKey {
                auth_key: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn account_set_num_signatures_required(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::AccountSetNumSignaturesRequired {
                num_signatures_required: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn account_swap_authentication_key(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::AccountSwapAuthenticationKey {
                old_auth_key: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn code_publish_package_txn(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::CodePublishPackageTxn {
                metadata_serialized: bcs::from_bytes(script.args().get(0)?).ok()?,
                code: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn delegation_pool_add_stake(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::DelegationPoolAddStake {
                pool_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                amount: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn delegation_pool_create_proposal(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::DelegationPoolCreateProposal {
                pool_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                execution_hash: bcs::from_bytes(script.args().get(1)?).ok()?,
                metadata_location: bcs::from_bytes(script.args().get(2)?).ok()?,
                metadata_hash: bcs::from_bytes(script.args().get(3)?).ok()?,
                is_multi_step_proposal: bcs::from_bytes(script.args().get(4)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn delegation_pool_delegate_voting_power(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::DelegationPoolDelegateVotingPower {
                pool_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                new_voter: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn delegation_pool_enable_partial_governance_voting(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(
                EntryFunctionCall::DelegationPoolEnablePartialGovernanceVoting {
                    pool_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                },
            )
        } else {
            None
        }
    }

    pub fn delegation_pool_initialize_delegation_pool(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::DelegationPoolInitializeDelegationPool {
                operator_commission_percentage: bcs::from_bytes(script.args().get(0)?).ok()?,
                delegation_pool_creation_seed: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn delegation_pool_reactivate_stake(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::DelegationPoolReactivateStake {
                pool_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                amount: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn delegation_pool_set_beneficiary_for_operator(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::DelegationPoolSetBeneficiaryForOperator {
                new_beneficiary: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn delegation_pool_set_delegated_voter(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::DelegationPoolSetDelegatedVoter {
                new_voter: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn delegation_pool_set_operator(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::DelegationPoolSetOperator {
                new_operator: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn delegation_pool_synchronize_delegation_pool(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::DelegationPoolSynchronizeDelegationPool {
                pool_address: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn delegation_pool_unlock(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::DelegationPoolUnlock {
                pool_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                amount: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn delegation_pool_update_commission_percentage(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(
                EntryFunctionCall::DelegationPoolUpdateCommissionPercentage {
                    new_commission_percentage: bcs::from_bytes(script.args().get(0)?).ok()?,
                },
            )
        } else {
            None
        }
    }

    pub fn delegation_pool_vote(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::DelegationPoolVote {
                pool_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                proposal_id: bcs::from_bytes(script.args().get(1)?).ok()?,
                voting_power: bcs::from_bytes(script.args().get(2)?).ok()?,
                should_pass: bcs::from_bytes(script.args().get(3)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn delegation_pool_withdraw(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::DelegationPoolWithdraw {
                pool_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                amount: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn endless_account_batch_transfer(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::EndlessAccountBatchTransfer {
                recipients: bcs::from_bytes(script.args().get(0)?).ok()?,
                amounts: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn endless_account_create_account(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::EndlessAccountCreateAccount {
                auth_key: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn endless_account_set_allow_direct_coin_transfers(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(
                EntryFunctionCall::EndlessAccountSetAllowDirectCoinTransfers {
                    allow: bcs::from_bytes(script.args().get(0)?).ok()?,
                },
            )
        } else {
            None
        }
    }

    pub fn endless_account_transfer(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::EndlessAccountTransfer {
                to: bcs::from_bytes(script.args().get(0)?).ok()?,
                amount: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn endless_coin_claim_mint_capability(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(_script) = payload {
            Some(EntryFunctionCall::EndlessCoinClaimMintCapability {})
        } else {
            None
        }
    }

    pub fn endless_coin_delegate_mint_capability(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::EndlessCoinDelegateMintCapability {
                to: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn endless_coin_mint(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::EndlessCoinMint {
                dst_addr: bcs::from_bytes(script.args().get(0)?).ok()?,
                amount: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn endless_coin_transfer(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::EndlessCoinTransfer {
                to: bcs::from_bytes(script.args().get(0)?).ok()?,
                amount: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn endless_governance_add_approved_script_hash_script(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(
                EntryFunctionCall::EndlessGovernanceAddApprovedScriptHashScript {
                    proposal_id: bcs::from_bytes(script.args().get(0)?).ok()?,
                },
            )
        } else {
            None
        }
    }

    pub fn endless_governance_create_proposal(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::EndlessGovernanceCreateProposal {
                stake_pool: bcs::from_bytes(script.args().get(0)?).ok()?,
                execution_hash: bcs::from_bytes(script.args().get(1)?).ok()?,
                metadata_location: bcs::from_bytes(script.args().get(2)?).ok()?,
                metadata_hash: bcs::from_bytes(script.args().get(3)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn endless_governance_create_proposal_v2(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::EndlessGovernanceCreateProposalV2 {
                stake_pool: bcs::from_bytes(script.args().get(0)?).ok()?,
                execution_hash: bcs::from_bytes(script.args().get(1)?).ok()?,
                metadata_location: bcs::from_bytes(script.args().get(2)?).ok()?,
                metadata_hash: bcs::from_bytes(script.args().get(3)?).ok()?,
                is_multi_step_proposal: bcs::from_bytes(script.args().get(4)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn endless_governance_force_end_epoch_test_only(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(_script) = payload {
            Some(EntryFunctionCall::EndlessGovernanceForceEndEpochTestOnly {})
        } else {
            None
        }
    }

    pub fn endless_governance_partial_vote(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::EndlessGovernancePartialVote {
                stake_pool: bcs::from_bytes(script.args().get(0)?).ok()?,
                proposal_id: bcs::from_bytes(script.args().get(1)?).ok()?,
                voting_power: bcs::from_bytes(script.args().get(2)?).ok()?,
                should_pass: bcs::from_bytes(script.args().get(3)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn endless_governance_vote(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::EndlessGovernanceVote {
                stake_pool: bcs::from_bytes(script.args().get(0)?).ok()?,
                proposal_id: bcs::from_bytes(script.args().get(1)?).ok()?,
                should_pass: bcs::from_bytes(script.args().get(2)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn faucet_fund(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::FaucetFund {
                dst_addr: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn locking_coin_ex_add_locking_plan(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::LockingCoinExAddLockingPlan {
                token_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                reciever: bcs::from_bytes(script.args().get(1)?).ok()?,
                total_coins: bcs::from_bytes(script.args().get(2)?).ok()?,
                first_unlock_percent: bcs::from_bytes(script.args().get(3)?).ok()?,
                first_unlock_epoch: bcs::from_bytes(script.args().get(4)?).ok()?,
                stable_unlock_interval: bcs::from_bytes(script.args().get(5)?).ok()?,
                stable_unlock_periods: bcs::from_bytes(script.args().get(6)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn locking_coin_ex_add_locking_plan_from_unlocked_balance(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(
                EntryFunctionCall::LockingCoinExAddLockingPlanFromUnlockedBalance {
                    token_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                    reciever: bcs::from_bytes(script.args().get(1)?).ok()?,
                    total_coins: bcs::from_bytes(script.args().get(2)?).ok()?,
                    first_unlock_percent: bcs::from_bytes(script.args().get(3)?).ok()?,
                    first_unlock_epoch: bcs::from_bytes(script.args().get(4)?).ok()?,
                    stable_unlock_interval: bcs::from_bytes(script.args().get(5)?).ok()?,
                    stable_unlock_periods: bcs::from_bytes(script.args().get(6)?).ok()?,
                },
            )
        } else {
            None
        }
    }

    pub fn locking_coin_ex_claim(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::LockingCoinExClaim {
                token_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                amount: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn multisig_account_approve_transaction(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::MultisigAccountApproveTransaction {
                multisig_account: bcs::from_bytes(script.args().get(0)?).ok()?,
                sequence_number: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn multisig_account_create_transaction(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::MultisigAccountCreateTransaction {
                multisig_account: bcs::from_bytes(script.args().get(0)?).ok()?,
                payload: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn multisig_account_create_transaction_with_hash(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(
                EntryFunctionCall::MultisigAccountCreateTransactionWithHash {
                    multisig_account: bcs::from_bytes(script.args().get(0)?).ok()?,
                    payload_hash: bcs::from_bytes(script.args().get(1)?).ok()?,
                },
            )
        } else {
            None
        }
    }

    pub fn multisig_account_execute_rejected_transaction(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(
                EntryFunctionCall::MultisigAccountExecuteRejectedTransaction {
                    multisig_account: bcs::from_bytes(script.args().get(0)?).ok()?,
                },
            )
        } else {
            None
        }
    }

    pub fn multisig_account_reject_transaction(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::MultisigAccountRejectTransaction {
                multisig_account: bcs::from_bytes(script.args().get(0)?).ok()?,
                sequence_number: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn multisig_account_vote_transanction(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::MultisigAccountVoteTransanction {
                multisig_account: bcs::from_bytes(script.args().get(0)?).ok()?,
                sequence_number: bcs::from_bytes(script.args().get(1)?).ok()?,
                approved: bcs::from_bytes(script.args().get(2)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn object_transfer_call(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::ObjectTransferCall {
                object: bcs::from_bytes(script.args().get(0)?).ok()?,
                to: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn object_code_deployment_publish(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::ObjectCodeDeploymentPublish {
                metadata_serialized: bcs::from_bytes(script.args().get(0)?).ok()?,
                code: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn resource_account_create_resource_account(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::ResourceAccountCreateResourceAccount {
                seed: bcs::from_bytes(script.args().get(0)?).ok()?,
                optional_auth_key: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn resource_account_create_resource_account_and_fund(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(
                EntryFunctionCall::ResourceAccountCreateResourceAccountAndFund {
                    seed: bcs::from_bytes(script.args().get(0)?).ok()?,
                    optional_auth_key: bcs::from_bytes(script.args().get(1)?).ok()?,
                    fund_amount: bcs::from_bytes(script.args().get(2)?).ok()?,
                },
            )
        } else {
            None
        }
    }

    pub fn resource_account_create_resource_account_and_publish_package(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(
                EntryFunctionCall::ResourceAccountCreateResourceAccountAndPublishPackage {
                    seed: bcs::from_bytes(script.args().get(0)?).ok()?,
                    metadata_serialized: bcs::from_bytes(script.args().get(1)?).ok()?,
                    code: bcs::from_bytes(script.args().get(2)?).ok()?,
                },
            )
        } else {
            None
        }
    }

    pub fn stake_add_stake(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakeAddStake {
                amount: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn stake_increase_lockup(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(_script) = payload {
            Some(EntryFunctionCall::StakeIncreaseLockup {})
        } else {
            None
        }
    }

    pub fn stake_initialize_stake_owner(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakeInitializeStakeOwner {
                initial_stake_amount: bcs::from_bytes(script.args().get(0)?).ok()?,
                operator: bcs::from_bytes(script.args().get(1)?).ok()?,
                voter: bcs::from_bytes(script.args().get(2)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn stake_initialize_validator(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakeInitializeValidator {
                consensus_pubkey: bcs::from_bytes(script.args().get(0)?).ok()?,
                proof_of_possession: bcs::from_bytes(script.args().get(1)?).ok()?,
                network_addresses: bcs::from_bytes(script.args().get(2)?).ok()?,
                fullnode_addresses: bcs::from_bytes(script.args().get(3)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn stake_join_validator_set(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakeJoinValidatorSet {
                pool_address: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn stake_leave_validator_set(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakeLeaveValidatorSet {
                pool_address: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn stake_reactivate_stake(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakeReactivateStake {
                amount: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn stake_rotate_consensus_key(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakeRotateConsensusKey {
                pool_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                new_consensus_pubkey: bcs::from_bytes(script.args().get(1)?).ok()?,
                proof_of_possession: bcs::from_bytes(script.args().get(2)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn stake_set_delegated_voter(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakeSetDelegatedVoter {
                new_voter: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn stake_set_operator(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakeSetOperator {
                new_operator: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn stake_unlock(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakeUnlock {
                amount: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn stake_update_network_and_fullnode_addresses(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakeUpdateNetworkAndFullnodeAddresses {
                pool_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                new_network_addresses: bcs::from_bytes(script.args().get(1)?).ok()?,
                new_fullnode_addresses: bcs::from_bytes(script.args().get(2)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn stake_withdraw(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakeWithdraw {
                withdraw_amount: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn staking_contract_add_stake(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakingContractAddStake {
                operator: bcs::from_bytes(script.args().get(0)?).ok()?,
                amount: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn staking_contract_create_staking_contract(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakingContractCreateStakingContract {
                operator: bcs::from_bytes(script.args().get(0)?).ok()?,
                voter: bcs::from_bytes(script.args().get(1)?).ok()?,
                amount: bcs::from_bytes(script.args().get(2)?).ok()?,
                commission_percentage: bcs::from_bytes(script.args().get(3)?).ok()?,
                contract_creation_seed: bcs::from_bytes(script.args().get(4)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn staking_contract_distribute(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakingContractDistribute {
                staker: bcs::from_bytes(script.args().get(0)?).ok()?,
                operator: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn staking_contract_request_commission(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakingContractRequestCommission {
                staker: bcs::from_bytes(script.args().get(0)?).ok()?,
                operator: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn staking_contract_reset_lockup(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakingContractResetLockup {
                operator: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn staking_contract_set_beneficiary_for_operator(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(
                EntryFunctionCall::StakingContractSetBeneficiaryForOperator {
                    new_beneficiary: bcs::from_bytes(script.args().get(0)?).ok()?,
                },
            )
        } else {
            None
        }
    }

    pub fn staking_contract_switch_operator(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakingContractSwitchOperator {
                old_operator: bcs::from_bytes(script.args().get(0)?).ok()?,
                new_operator: bcs::from_bytes(script.args().get(1)?).ok()?,
                new_commission_percentage: bcs::from_bytes(script.args().get(2)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn staking_contract_switch_operator_with_same_commission(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(
                EntryFunctionCall::StakingContractSwitchOperatorWithSameCommission {
                    old_operator: bcs::from_bytes(script.args().get(0)?).ok()?,
                    new_operator: bcs::from_bytes(script.args().get(1)?).ok()?,
                },
            )
        } else {
            None
        }
    }

    pub fn staking_contract_unlock_rewards(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakingContractUnlockRewards {
                operator: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn staking_contract_unlock_stake(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakingContractUnlockStake {
                operator: bcs::from_bytes(script.args().get(0)?).ok()?,
                amount: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn staking_contract_update_commision(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakingContractUpdateCommision {
                operator: bcs::from_bytes(script.args().get(0)?).ok()?,
                new_commission_percentage: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn staking_contract_update_voter(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakingContractUpdateVoter {
                operator: bcs::from_bytes(script.args().get(0)?).ok()?,
                new_voter: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn staking_proxy_set_operator(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakingProxySetOperator {
                old_operator: bcs::from_bytes(script.args().get(0)?).ok()?,
                new_operator: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn staking_proxy_set_stake_pool_operator(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakingProxySetStakePoolOperator {
                new_operator: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn staking_proxy_set_stake_pool_voter(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakingProxySetStakePoolVoter {
                new_voter: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn staking_proxy_set_staking_contract_operator(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakingProxySetStakingContractOperator {
                old_operator: bcs::from_bytes(script.args().get(0)?).ok()?,
                new_operator: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn staking_proxy_set_staking_contract_voter(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakingProxySetStakingContractVoter {
                operator: bcs::from_bytes(script.args().get(0)?).ok()?,
                new_voter: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn staking_proxy_set_vesting_contract_operator(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakingProxySetVestingContractOperator {
                old_operator: bcs::from_bytes(script.args().get(0)?).ok()?,
                new_operator: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn staking_proxy_set_vesting_contract_voter(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakingProxySetVestingContractVoter {
                operator: bcs::from_bytes(script.args().get(0)?).ok()?,
                new_voter: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn staking_proxy_set_voter(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::StakingProxySetVoter {
                operator: bcs::from_bytes(script.args().get(0)?).ok()?,
                new_voter: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn version_set_for_next_epoch(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::VersionSetForNextEpoch {
                major: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn vesting_admin_withdraw(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::VestingAdminWithdraw {
                contract_address: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn vesting_distribute(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::VestingDistribute {
                contract_address: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn vesting_distribute_many(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::VestingDistributeMany {
                contract_addresses: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn vesting_reset_beneficiary(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::VestingResetBeneficiary {
                contract_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                shareholder: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn vesting_reset_lockup(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::VestingResetLockup {
                contract_address: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn vesting_set_beneficiary(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::VestingSetBeneficiary {
                contract_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                shareholder: bcs::from_bytes(script.args().get(1)?).ok()?,
                new_beneficiary: bcs::from_bytes(script.args().get(2)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn vesting_set_beneficiary_for_operator(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::VestingSetBeneficiaryForOperator {
                new_beneficiary: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn vesting_set_beneficiary_resetter(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::VestingSetBeneficiaryResetter {
                contract_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                beneficiary_resetter: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn vesting_set_management_role(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::VestingSetManagementRole {
                contract_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                role: bcs::from_bytes(script.args().get(1)?).ok()?,
                role_holder: bcs::from_bytes(script.args().get(2)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn vesting_terminate_vesting_contract(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::VestingTerminateVestingContract {
                contract_address: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn vesting_unlock_rewards(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::VestingUnlockRewards {
                contract_address: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn vesting_unlock_rewards_many(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::VestingUnlockRewardsMany {
                contract_addresses: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn vesting_update_commission_percentage(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::VestingUpdateCommissionPercentage {
                contract_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                new_commission_percentage: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn vesting_update_operator(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::VestingUpdateOperator {
                contract_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                new_operator: bcs::from_bytes(script.args().get(1)?).ok()?,
                commission_percentage: bcs::from_bytes(script.args().get(2)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn vesting_update_operator_with_same_commission(
        payload: &TransactionPayload,
    ) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::VestingUpdateOperatorWithSameCommission {
                contract_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                new_operator: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn vesting_update_voter(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::VestingUpdateVoter {
                contract_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                new_voter: bcs::from_bytes(script.args().get(1)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn vesting_vest(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::VestingVest {
                contract_address: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn vesting_vest_many(payload: &TransactionPayload) -> Option<EntryFunctionCall> {
        if let TransactionPayload::EntryFunction(script) = payload {
            Some(EntryFunctionCall::VestingVestMany {
                contract_addresses: bcs::from_bytes(script.args().get(0)?).ok()?,
            })
        } else {
            None
        }
    }
}

type EntryFunctionDecoderMap = std::collections::HashMap<
    String,
    Box<
        dyn Fn(&TransactionPayload) -> Option<EntryFunctionCall>
            + std::marker::Sync
            + std::marker::Send,
    >,
>;

static SCRIPT_FUNCTION_DECODER_MAP: once_cell::sync::Lazy<EntryFunctionDecoderMap> =
    once_cell::sync::Lazy::new(|| {
        let mut map: EntryFunctionDecoderMap = std::collections::HashMap::new();
        map.insert(
            "account_add_authentication_key".to_string(),
            Box::new(decoder::account_add_authentication_key),
        );
        map.insert(
            "account_batch_add_authentication_key".to_string(),
            Box::new(decoder::account_batch_add_authentication_key),
        );
        map.insert(
            "account_batch_remove_authentication_key".to_string(),
            Box::new(decoder::account_batch_remove_authentication_key),
        );
        map.insert(
            "account_create_multisig_account".to_string(),
            Box::new(decoder::account_create_multisig_account),
        );
        map.insert(
            "account_remove_authentication_key".to_string(),
            Box::new(decoder::account_remove_authentication_key),
        );
        map.insert(
            "account_set_num_signatures_required".to_string(),
            Box::new(decoder::account_set_num_signatures_required),
        );
        map.insert(
            "account_swap_authentication_key".to_string(),
            Box::new(decoder::account_swap_authentication_key),
        );
        map.insert(
            "code_publish_package_txn".to_string(),
            Box::new(decoder::code_publish_package_txn),
        );
        map.insert(
            "delegation_pool_add_stake".to_string(),
            Box::new(decoder::delegation_pool_add_stake),
        );
        map.insert(
            "delegation_pool_create_proposal".to_string(),
            Box::new(decoder::delegation_pool_create_proposal),
        );
        map.insert(
            "delegation_pool_delegate_voting_power".to_string(),
            Box::new(decoder::delegation_pool_delegate_voting_power),
        );
        map.insert(
            "delegation_pool_enable_partial_governance_voting".to_string(),
            Box::new(decoder::delegation_pool_enable_partial_governance_voting),
        );
        map.insert(
            "delegation_pool_initialize_delegation_pool".to_string(),
            Box::new(decoder::delegation_pool_initialize_delegation_pool),
        );
        map.insert(
            "delegation_pool_reactivate_stake".to_string(),
            Box::new(decoder::delegation_pool_reactivate_stake),
        );
        map.insert(
            "delegation_pool_set_beneficiary_for_operator".to_string(),
            Box::new(decoder::delegation_pool_set_beneficiary_for_operator),
        );
        map.insert(
            "delegation_pool_set_delegated_voter".to_string(),
            Box::new(decoder::delegation_pool_set_delegated_voter),
        );
        map.insert(
            "delegation_pool_set_operator".to_string(),
            Box::new(decoder::delegation_pool_set_operator),
        );
        map.insert(
            "delegation_pool_synchronize_delegation_pool".to_string(),
            Box::new(decoder::delegation_pool_synchronize_delegation_pool),
        );
        map.insert(
            "delegation_pool_unlock".to_string(),
            Box::new(decoder::delegation_pool_unlock),
        );
        map.insert(
            "delegation_pool_update_commission_percentage".to_string(),
            Box::new(decoder::delegation_pool_update_commission_percentage),
        );
        map.insert(
            "delegation_pool_vote".to_string(),
            Box::new(decoder::delegation_pool_vote),
        );
        map.insert(
            "delegation_pool_withdraw".to_string(),
            Box::new(decoder::delegation_pool_withdraw),
        );
        map.insert(
            "endless_account_batch_transfer".to_string(),
            Box::new(decoder::endless_account_batch_transfer),
        );
        map.insert(
            "endless_account_create_account".to_string(),
            Box::new(decoder::endless_account_create_account),
        );
        map.insert(
            "endless_account_set_allow_direct_coin_transfers".to_string(),
            Box::new(decoder::endless_account_set_allow_direct_coin_transfers),
        );
        map.insert(
            "endless_account_transfer".to_string(),
            Box::new(decoder::endless_account_transfer),
        );
        map.insert(
            "endless_coin_claim_mint_capability".to_string(),
            Box::new(decoder::endless_coin_claim_mint_capability),
        );
        map.insert(
            "endless_coin_delegate_mint_capability".to_string(),
            Box::new(decoder::endless_coin_delegate_mint_capability),
        );
        map.insert(
            "endless_coin_mint".to_string(),
            Box::new(decoder::endless_coin_mint),
        );
        map.insert(
            "endless_coin_transfer".to_string(),
            Box::new(decoder::endless_coin_transfer),
        );
        map.insert(
            "endless_governance_add_approved_script_hash_script".to_string(),
            Box::new(decoder::endless_governance_add_approved_script_hash_script),
        );
        map.insert(
            "endless_governance_create_proposal".to_string(),
            Box::new(decoder::endless_governance_create_proposal),
        );
        map.insert(
            "endless_governance_create_proposal_v2".to_string(),
            Box::new(decoder::endless_governance_create_proposal_v2),
        );
        map.insert(
            "endless_governance_force_end_epoch_test_only".to_string(),
            Box::new(decoder::endless_governance_force_end_epoch_test_only),
        );
        map.insert(
            "endless_governance_partial_vote".to_string(),
            Box::new(decoder::endless_governance_partial_vote),
        );
        map.insert(
            "endless_governance_vote".to_string(),
            Box::new(decoder::endless_governance_vote),
        );
        map.insert("faucet_fund".to_string(), Box::new(decoder::faucet_fund));
        map.insert(
            "locking_coin_ex_add_locking_plan".to_string(),
            Box::new(decoder::locking_coin_ex_add_locking_plan),
        );
        map.insert(
            "locking_coin_ex_add_locking_plan_from_unlocked_balance".to_string(),
            Box::new(decoder::locking_coin_ex_add_locking_plan_from_unlocked_balance),
        );
        map.insert(
            "locking_coin_ex_claim".to_string(),
            Box::new(decoder::locking_coin_ex_claim),
        );
        map.insert(
            "multisig_account_approve_transaction".to_string(),
            Box::new(decoder::multisig_account_approve_transaction),
        );
        map.insert(
            "multisig_account_create_transaction".to_string(),
            Box::new(decoder::multisig_account_create_transaction),
        );
        map.insert(
            "multisig_account_create_transaction_with_hash".to_string(),
            Box::new(decoder::multisig_account_create_transaction_with_hash),
        );
        map.insert(
            "multisig_account_execute_rejected_transaction".to_string(),
            Box::new(decoder::multisig_account_execute_rejected_transaction),
        );
        map.insert(
            "multisig_account_reject_transaction".to_string(),
            Box::new(decoder::multisig_account_reject_transaction),
        );
        map.insert(
            "multisig_account_vote_transanction".to_string(),
            Box::new(decoder::multisig_account_vote_transanction),
        );
        map.insert(
            "object_transfer_call".to_string(),
            Box::new(decoder::object_transfer_call),
        );
        map.insert(
            "object_code_deployment_publish".to_string(),
            Box::new(decoder::object_code_deployment_publish),
        );
        map.insert(
            "resource_account_create_resource_account".to_string(),
            Box::new(decoder::resource_account_create_resource_account),
        );
        map.insert(
            "resource_account_create_resource_account_and_fund".to_string(),
            Box::new(decoder::resource_account_create_resource_account_and_fund),
        );
        map.insert(
            "resource_account_create_resource_account_and_publish_package".to_string(),
            Box::new(decoder::resource_account_create_resource_account_and_publish_package),
        );
        map.insert(
            "stake_add_stake".to_string(),
            Box::new(decoder::stake_add_stake),
        );
        map.insert(
            "stake_increase_lockup".to_string(),
            Box::new(decoder::stake_increase_lockup),
        );
        map.insert(
            "stake_initialize_stake_owner".to_string(),
            Box::new(decoder::stake_initialize_stake_owner),
        );
        map.insert(
            "stake_initialize_validator".to_string(),
            Box::new(decoder::stake_initialize_validator),
        );
        map.insert(
            "stake_join_validator_set".to_string(),
            Box::new(decoder::stake_join_validator_set),
        );
        map.insert(
            "stake_leave_validator_set".to_string(),
            Box::new(decoder::stake_leave_validator_set),
        );
        map.insert(
            "stake_reactivate_stake".to_string(),
            Box::new(decoder::stake_reactivate_stake),
        );
        map.insert(
            "stake_rotate_consensus_key".to_string(),
            Box::new(decoder::stake_rotate_consensus_key),
        );
        map.insert(
            "stake_set_delegated_voter".to_string(),
            Box::new(decoder::stake_set_delegated_voter),
        );
        map.insert(
            "stake_set_operator".to_string(),
            Box::new(decoder::stake_set_operator),
        );
        map.insert("stake_unlock".to_string(), Box::new(decoder::stake_unlock));
        map.insert(
            "stake_update_network_and_fullnode_addresses".to_string(),
            Box::new(decoder::stake_update_network_and_fullnode_addresses),
        );
        map.insert(
            "stake_withdraw".to_string(),
            Box::new(decoder::stake_withdraw),
        );
        map.insert(
            "staking_contract_add_stake".to_string(),
            Box::new(decoder::staking_contract_add_stake),
        );
        map.insert(
            "staking_contract_create_staking_contract".to_string(),
            Box::new(decoder::staking_contract_create_staking_contract),
        );
        map.insert(
            "staking_contract_distribute".to_string(),
            Box::new(decoder::staking_contract_distribute),
        );
        map.insert(
            "staking_contract_request_commission".to_string(),
            Box::new(decoder::staking_contract_request_commission),
        );
        map.insert(
            "staking_contract_reset_lockup".to_string(),
            Box::new(decoder::staking_contract_reset_lockup),
        );
        map.insert(
            "staking_contract_set_beneficiary_for_operator".to_string(),
            Box::new(decoder::staking_contract_set_beneficiary_for_operator),
        );
        map.insert(
            "staking_contract_switch_operator".to_string(),
            Box::new(decoder::staking_contract_switch_operator),
        );
        map.insert(
            "staking_contract_switch_operator_with_same_commission".to_string(),
            Box::new(decoder::staking_contract_switch_operator_with_same_commission),
        );
        map.insert(
            "staking_contract_unlock_rewards".to_string(),
            Box::new(decoder::staking_contract_unlock_rewards),
        );
        map.insert(
            "staking_contract_unlock_stake".to_string(),
            Box::new(decoder::staking_contract_unlock_stake),
        );
        map.insert(
            "staking_contract_update_commision".to_string(),
            Box::new(decoder::staking_contract_update_commision),
        );
        map.insert(
            "staking_contract_update_voter".to_string(),
            Box::new(decoder::staking_contract_update_voter),
        );
        map.insert(
            "staking_proxy_set_operator".to_string(),
            Box::new(decoder::staking_proxy_set_operator),
        );
        map.insert(
            "staking_proxy_set_stake_pool_operator".to_string(),
            Box::new(decoder::staking_proxy_set_stake_pool_operator),
        );
        map.insert(
            "staking_proxy_set_stake_pool_voter".to_string(),
            Box::new(decoder::staking_proxy_set_stake_pool_voter),
        );
        map.insert(
            "staking_proxy_set_staking_contract_operator".to_string(),
            Box::new(decoder::staking_proxy_set_staking_contract_operator),
        );
        map.insert(
            "staking_proxy_set_staking_contract_voter".to_string(),
            Box::new(decoder::staking_proxy_set_staking_contract_voter),
        );
        map.insert(
            "staking_proxy_set_vesting_contract_operator".to_string(),
            Box::new(decoder::staking_proxy_set_vesting_contract_operator),
        );
        map.insert(
            "staking_proxy_set_vesting_contract_voter".to_string(),
            Box::new(decoder::staking_proxy_set_vesting_contract_voter),
        );
        map.insert(
            "staking_proxy_set_voter".to_string(),
            Box::new(decoder::staking_proxy_set_voter),
        );
        map.insert(
            "version_set_for_next_epoch".to_string(),
            Box::new(decoder::version_set_for_next_epoch),
        );
        map.insert(
            "vesting_admin_withdraw".to_string(),
            Box::new(decoder::vesting_admin_withdraw),
        );
        map.insert(
            "vesting_distribute".to_string(),
            Box::new(decoder::vesting_distribute),
        );
        map.insert(
            "vesting_distribute_many".to_string(),
            Box::new(decoder::vesting_distribute_many),
        );
        map.insert(
            "vesting_reset_beneficiary".to_string(),
            Box::new(decoder::vesting_reset_beneficiary),
        );
        map.insert(
            "vesting_reset_lockup".to_string(),
            Box::new(decoder::vesting_reset_lockup),
        );
        map.insert(
            "vesting_set_beneficiary".to_string(),
            Box::new(decoder::vesting_set_beneficiary),
        );
        map.insert(
            "vesting_set_beneficiary_for_operator".to_string(),
            Box::new(decoder::vesting_set_beneficiary_for_operator),
        );
        map.insert(
            "vesting_set_beneficiary_resetter".to_string(),
            Box::new(decoder::vesting_set_beneficiary_resetter),
        );
        map.insert(
            "vesting_set_management_role".to_string(),
            Box::new(decoder::vesting_set_management_role),
        );
        map.insert(
            "vesting_terminate_vesting_contract".to_string(),
            Box::new(decoder::vesting_terminate_vesting_contract),
        );
        map.insert(
            "vesting_unlock_rewards".to_string(),
            Box::new(decoder::vesting_unlock_rewards),
        );
        map.insert(
            "vesting_unlock_rewards_many".to_string(),
            Box::new(decoder::vesting_unlock_rewards_many),
        );
        map.insert(
            "vesting_update_commission_percentage".to_string(),
            Box::new(decoder::vesting_update_commission_percentage),
        );
        map.insert(
            "vesting_update_operator".to_string(),
            Box::new(decoder::vesting_update_operator),
        );
        map.insert(
            "vesting_update_operator_with_same_commission".to_string(),
            Box::new(decoder::vesting_update_operator_with_same_commission),
        );
        map.insert(
            "vesting_update_voter".to_string(),
            Box::new(decoder::vesting_update_voter),
        );
        map.insert("vesting_vest".to_string(), Box::new(decoder::vesting_vest));
        map.insert(
            "vesting_vest_many".to_string(),
            Box::new(decoder::vesting_vest_many),
        );
        map
    });
